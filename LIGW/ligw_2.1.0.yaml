openapi: 3.0.0
servers:
  - description: Test environment
    url: https://172.27.12.18:8448
info:
  description: |
    Emergency calls API for Yettel Location Info Gateway system.

    If an emergency call is received by Yettel, INode has to send a POST request to LIGW.
    The request will be processed and forwarded as an EtsiMessage to ESR servers.

    ⚠️ This API requires the use of HTTP/2 to ensure optimal performance and proper functionality. 
    All clients must support and utilize HTTP/2 when communicating with this service.

    **Recent changes in version 2.1.0:**

    - Enforced **HTTP/2-only** requirement for all requests.
    - Updated **405 Method Not Allowed** response to include the required `Allow: POST` header (RFC 9110 §15.5.6).
    - Removed the use of **404 Not Found** for unsupported paths – replaced with **400 INVALID_API** for invalid API version or URI (3GPP TS 29.500).
    - Removed unused **406 Not Acceptable** response, as it's not applicable for POST requests.
    - Expanded **400 Bad Request** errors with detailed and meaningful causes, aligned with 3GPP TS 29.500:
        - `INVALID_API` – unsupported API name or version in URI
        - `INVALID_MSG_FORMAT` – malformed JSON, invalid structure (e.g., array instead of object)
        - `INVALID_QUERY_PARAM` – unsupported query parameter in URI
        - `MANDATORY_IE_MISSING` – required information element is missing (e.g. missing body, missing required field)
        - `MANDATORY_IE_INCORRECT` – required field present but with invalid value (e.g. wrong format)
        - `OPTIONAL_IE_INCORRECT` – optional field is present but value prevents processing
        - `UNSPECIFIED_MSG_FAILURE` – used only when the request is invalid but does not match any known validation category. For example: an unexpected client behavior, corrupted input, or internal validation logic could not identify a more specific error cause.
    - Added clear response examples for request body issues:
        - missing request body
        - array instead of object
        - invalid JSON syntax
    - Updated **401 Unauthorized** responses to include all Yettel-specific `msg-ctx-*` headers
    - Added support for `msg-ctx-user-id` header in the request
    - Added **413 Content Too Large**, **414 URI Too Long** and **431 Request Header Fields Too Large** responses 
    - Updated usage of `msg-ctx-*` headers to align with Yettel-specific standards

  version: "2.1.0"
  title: Emergency calls api
  contact:
    email: aweimann@verisis.hu
tags:
  - name: callReceive
    description: Emergency calls
security:
  - basicAuth: []
paths:
  /ligw/emergency/v2/tasks:
    post:
      tags:
        - callReceive
      summary: notify about an emergency call event, create a new task in Location Info Gateway system
      operationId: receivedEvent
      description: |
        Create a new emergency task.
        
        ⚠️ This endpoint requires HTTP/2.0. Requests sent using HTTP/1.1 will be rejected or not properly processed.
      parameters:
        #header
          - $ref: '#/components/parameters/Authorization'
          - $ref: '#/components/parameters/Msg_ctx_src'
          - $ref: '#/components/parameters/Msg_ctx_src_module'
          - $ref: '#/components/parameters/Msg_ctx_env'
          - $ref: '#/components/parameters/Msg_ctx_id'
          - $ref: '#/components/parameters/Msg_ctx_corr_id'
          - $ref: '#/components/parameters/Msg_ctx_build_number'
          - $ref: '#/components/parameters/Msg_ctx_user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Emergency task to create
      responses:
        '201':
          description: Task created, but no body content
          headers:
            location:
              $ref: '#/components/headers/Location'
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
              example: {}
        '400':
          description: Bad Request – Invalid input, path or headers
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Result400'
              examples:
                Invalid API Example:
                  $ref: '#/components/examples/InvalidApi'
                Invalid message format Example:
                  $ref: '#/components/examples/InvalidMsgFormat'
                Invalid query parameter Example:
                  $ref: '#/components/examples/InvalidQueryParam'
                Mandatory IE incorrect Example:
                  $ref: '#/components/examples/MandatoryIeIncorrect'
                Optional IE incorrect Example:
                  $ref: '#/components/examples/OptionalIeIncorrect'
                Mandatory IE missing Example:
                  $ref: '#/components/examples/MandatoryIeMissing'
                Unspecified message failure Example:
                  $ref: '#/components/examples/UnspecifiedMsgFailure'
                Missing request body Example:
                  $ref: '#/components/examples/MissingRequestBody'
                JSON array in body Example:
                  $ref: '#/components/examples/BodyIsArray'

        '401':
          description: Authentication Failed – Authorization header missing or invalid
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '405': 
          description: Method Not Allowed – Only POST is supported
          headers:
            allow:
              description: (mandatory) Allowed HTTP methods for this endpoint
              required: true
              schema:
                type: string
                example: "POST"
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '413':
          description: Content Too Large
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '414':
          description: URI Too Long
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '415':
          description: Unsupported Media Type
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
            accept:
              $ref: '#/components/headers/Accept'
        '431':
          description: Request Header Fields Too Large
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '500':
          description: Internal Error - retriable
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Result500'
              examples:
                Server error Example:
                  $ref: '#/components/examples/ServerError'
        '503':
          description: Service Unavailable
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
        '505':
          description: HTTP Version Not Supported
          headers:
            msg-ctx-src:
              $ref: '#/components/headers/Msg_ctx_src'
            msg-ctx-src-module:
              $ref: '#/components/headers/Msg_ctx_src_module'
            msg-ctx-env:
              $ref: '#/components/headers/Msg_ctx_env'
            msg-ctx-id:
              $ref: '#/components/headers/Msg_ctx_id'
            msg-ctx-corr-id:
              $ref: '#/components/headers/Msg_ctx_corr_id'
            msg-ctx-build-number:
              $ref: '#/components/headers/Msg_ctx_build_number'
components:
  headers:
    Location:
      description: (mandatory) The id of the newly created object
      required: true
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{32}$'
        example: "43429a61f5f54ad4aec05a68d28b1350"
    Accept:
      description: (mandatory) Supported media types
      required: true
      schema:
        type: string
        enum: [application/json]
        example: "application/json"
    Msg_ctx_src:
      description: (mandatory) Name of the source system, the sender party of the message. This is used primarily for gathering information on services usage. The name should contain a human-readable name of the application
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_.]+$'
        maxLength: 64
        example: "LIGW"
    Msg_ctx_src_module:
      description: (optional) Name of the source system’s module which sent the message. Fill only if suitable
      required: false
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_.]+$'
        maxLength: 64
        example: null
    Msg_ctx_env:
      description: (mandatory) Identifier of the environment. If the environment is production, use the value 'prod'. Otherwise, use the proper string value which describes the environment (uat|uat8|uat13|uat15|test|tst1|tst2|dev|demo)
      required: true
      schema:
        type: string
        pattern: '^(prod|uat|uat8|uat13|uat15|test|tst1|tst2|dev|demo)$'
        example: "prod"
    Msg_ctx_id:
      description: (mandatory) In case of regular responses, this field must contain the ID of the message, which to it answers. Messaging infrastructure permits the usage of multiple answers for the same request. The specific service / interface definitions should mark if this capability is used by the actual implementation
      required: true
      schema:
        type: string
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        example: "53329a61-f5f5-4ad4-aec0-5a68d28b1350"
    Msg_ctx_corr_id:
      description: (mandatory) It intends to hold a flow (or session) identifier. The flow initiator generates the id, any other party should copy the received id into all subsequent messages/calls inside the flow. Ids should be unique for each and every flow
      required: true
      schema:
        type: string
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        example: "3385cbdb-8561-48f6-a671-5e271f486a41"
    Msg_ctx_build_number:
      description: (optional) It represents the sender application’s build version
      required: false
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_.]+$'
        maxLength: 16
        example: "3.1.0"
  parameters:
    Msg_ctx_src:
      name: msg-ctx-src
      description: Name of the source system, the sender party of the message. This is used primarily for gathering information on services usage. The name should contain a human-readable name of the application
      in: header
      required: true
      schema:
        type: string
        maxLength: 64
        pattern: '^[a-zA-Z0-9-_.]+$'
        example: "INode"
    Authorization:
      name: authorization
      description: 'Basic authentication credentials. Format: "Basic {credentials}", where {credentials} is the Base64-encoded string of "username:password".'
      in: header
      required: true
      schema:
        type: string
        minLength: 11
        maxLength: 720
        example: 'Basic YWRtaW46cGFzc3dvcmQ='
    Msg_ctx_src_module:
      name: msg-ctx-src-module
      description: Optional, name of the source system’s module which sent the message. Fill only if suitable
      in: header
      required: false
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_.]+$'
        maxLength: 64
        example: "INode6_SIP_AS"
    Msg_ctx_env:
      name: msg-ctx-env
      description: Identifier of the environment. If the environment is production, use the value 'prod'. Otherwise, use the proper string value which describes the environment (uat|uat8|uat13|uat15|test|tst1|tst2|dev|demo)
      in: header
      required: true
      schema:
        type: string
        pattern: '^(prod|uat|uat8|uat13|uat15|test|tst1|tst2|dev|demo)$'
        example: "prod"
    Msg_ctx_id:
      name: msg-ctx-id
      description: Unique identifier of the message. The calling party must guarantee this being a unique identifier (UUID, GUID, etc.)
      in: header
      required: true
      schema:
        type: string
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        example: "53329a61-f5f5-4ad4-aec0-5a68d28b1350"
    Msg_ctx_corr_id:
      name: msg-ctx-corr-id
      description: It intends to hold a flow (or session) identifier. The flow initiator generates the id, any other party should copy the received id into all subsequent messages/calls inside the flow. Ids should be unique for each and every flow
      in: header
      required: true
      schema:
        type: string
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        example: "3385cbdb-8561-48f6-a671-5e271f486a41"
    Msg_ctx_build_number:
      name: msg-ctx-build-number
      description: It represents the sender application’s build version
      in: header
      required: false
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_.]+$'
        maxLength: 16
        example: "release_20250516"
    Msg_ctx_user_id:
      name: msg-ctx-user-id
      description: Optional value of the original user that initiated the action.
      in: header
      required: false
      schema:
        type: string
        maxLength: 64
        pattern: '^[a-zA-Z0-9-_.]+$'
        example: "oper"
  schemas:
    Event:
      type: object
      required:
        - callingNumberFmt
        - callingNumber
        - callingNw
        - calledNumber
        - callInitTime
        - accessTech
        - providerNw
      properties:
        callingNumberFmt:
          type: number
          enum: [73,85]
          description: |
            Format of calling number
            
            73 - 'I' international
            
            85 - 'U' unknown
          example: 73
        callingNumber:
          type: string
          pattern: "[0-9]{3,31}"
          description: Calling Number
          example: "36201234567"
        callingNw:
          type: string
          pattern: "[0-9]{3}"
          description: Calling Party’s Service Provider’s Network Code 
          example: "919"
        calledNumber:
          type: string
          pattern: "[0-9]{3,31}"
          description: Called Number (112, 104, 105, 107, 36391120000 are used)
          example: "112"
        callInitTime:
          type: string
          format: date-time
          description: Call Initiation Timestamp in format ISO 8601 (RFC 3339)
          example: "2025-02-06T10:11:33+01:00"
        mcc:
          type: string
          pattern: "[0-9]{3}"
          description: Mobile Country Code. Mandatory if accessTech is not "unknown" (0)
          example: "216"
        mnc:
          type: string
          pattern: "[0-9]{2,3}"
          description: Mobile Network Code. Mandatory if accessTech is not "unknown" (0)
          example: "01"
        accessTech:
          type: number
          description: |
            Access Technology
  
            0: unknown
            
            1: UMTS (UTRAN)
            
            2: GSM (GERAN)
            
            6: LTE (eUTRAN)
            
            51: NR
          example: 6
        lac:
          type: number
          minimum: 0
          maximum: 65535
          description: |
            Location Area Code (Mandatory if accessTech is not "unknown" (0))
            
            <i>0 in case of LTE and NR</i>
          example: 0
        cellId:
          type: number
          minimum: 0
          maximum: 2147483647
          description: Cell ID / Service Area Code / eUTRAN Cell Identifier / NR Cell Identifier (Mandatory if accessTech is not "unknown" (0))
          example: 10001
        providerNw:
          type: string
          pattern: "[0-9]{3}"
          description: Data Provider's Network Code
          example: "919"
    Detail:
      description: A human-readable explanation specific to this occurrence of the problem
      type: string
    Result400:
      description: Detailed result for client-side errors
      type: object
      required:
        - title
        - status
        - cause
      properties:
        title:
          description: A short, human-readable summary of the problem type
          type: string
          example: "Invalid query parameter"
        status:
          description: HTTP status code
          type: number
          example: 400
        cause:
          description: A machine-readable cause for the problem
          type: string
          enum:
            - INVALID_API
            - INVALID_MSG_FORMAT
            - INVALID_QUERY_PARAM
            - MANDATORY_IE_INCORRECT
            - OPTIONAL_IE_INCORRECT
            - MANDATORY_IE_MISSING
            - UNSPECIFIED_MSG_FAILURE
          example: "INVALID_QUERY_PARAM"
        detail:
          $ref: '#/components/schemas/Detail'
    Result500:
      description: Detailed result for server-side errors
      type: object
      required:
        - title
        - status
        - cause
      properties:
        title:
          description: A short, human-readable summary of the problem type
          type: string
          example: "Internal server error"
        status:
          description: HTTP status code
          type: number
          example: 500
        cause:
          description: A machine-readable cause for the problem
          type: string
          enum: [SYSTEM_FAILURE]
          example: "SYSTEM_FAILURE"
        detail:
          $ref: '#/components/schemas/Detail'

  examples:
    InvalidApi:
      value:
        title: "Invalid API path"
        status: 400
        cause: "INVALID_API"
        detail: "The URI path does not match any supported API or version"
    InvalidMsgFormat:
      value:
        title: "Invalid message format"
        status: 400
        cause: "INVALID_MSG_FORMAT"
        detail: "Request body is not valid JSON or has invalid structure"
    InvalidQueryParam:
      value:
        title: "Invalid query parameter"
        status: 400
        cause: "INVALID_QUERY_PARAM"
        detail: "Unsupported query parameter: debug"
    MandatoryIeIncorrect:
      value:
        title: "Mandatory element incorrect"
        status: 400
        cause: "MANDATORY_IE_INCORRECT"
        detail: "callInitTime has incorrect format, expected ISO 8601"
    OptionalIeIncorrect:
      value:
        title: "Optional element incorrect"
        status: 400
        cause: "OPTIONAL_IE_INCORRECT"
        detail: "msg-ctx-build-number exceeds maximum length"
    MandatoryIeMissing:
      value:
        title: "Mandatory element missing"
        status: 400
        cause: "MANDATORY_IE_MISSING"
        detail: "Missing required field: callInitTime"
    UnspecifiedMsgFailure:
      value:
        title: "Unspecified message failure"
        status: 400
        cause: "UNSPECIFIED_MSG_FAILURE"
        detail: "The request could not be processed due to an unknown validation error. No specific error category matched"
    MissingRequestBody:
      value:
        title: "Missing request body"
        status: 400
        cause: "MANDATORY_IE_MISSING"
        detail: "Request body is mandatory but missing"
    BodyIsArray:
      value:
        title: "Request body must be object"
        status: 400
        cause: "INVALID_MSG_FORMAT"
        detail: "Expected a JSON object, but received an array"
    ServerError:
      value:
        title: "Internal server error"
        status: 500
        cause: "SYSTEM_FAILURE"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic