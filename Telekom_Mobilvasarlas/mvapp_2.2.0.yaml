openapi: 3.0.0
info:
  description: |
    This is the API specification for Telekom Mobilvasarlas
    
    Change wallet integration related data and endpoints
    
    Add textbook endpoint
  version: '2.2.0'
  title: Telekom Mobilvasarlas API
  contact:
    email: aweimann@verisis.hu
servers:
  - url: 'https://mobilapp.corsis.telekom.hu/webmobilepayment/v1/service'
tags:
  - name: usermgmt
    description: Operations for user management
  - name: highway
    description: Operations for highway vignette
  - name: parking
    description: Operations for mobile parking
  - name: gambling
    description: Operations for gambling
  - name: general
    description: Operations for general functions
  - name: product
    description: Operations for product service (e.g. BKK)
  - name: insurance
paths:
  # User management operations

  /user/login:
    post:
      summary: Registration/login request
      tags:
        - usermgmt
      operationId: userLogin
      description: Login into mobile application
      parameters:
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/s_Login'
        description: User's login data
      responses:
        '201':
          description: Login session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_UserLoginData'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'        
                
  /user/{userId}/login/{loginId}:
    post:
      summary: Login verification request
      tags:
        - usermgmt
      operationId: loginVerification
      description: Verification login session
      parameters:
        #path
          - $ref: '#/components/parameters/p_UserIdPath'
          - $ref: '#/components/parameters/p_LoginIdPath'
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  $ref: '#/components/schemas/s_UserCode'
        description: Verification code
      responses:
        '201':
          description: Success login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_UserData'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error' 
  /user/{userId}/verification:
    post:
      summary: Create verification process
      tags:
        - usermgmt
      operationId: createVerification
      description: Create verification process. It is needed to reset mobilepayment pin code.
      parameters:
        # path
          - $ref: '#/components/parameters/p_UserIdPath'
        # header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'           
          - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '201':
          description: Verification process created
          content:
            application/json:
              schema:
                properties:
                  verificationId:
                    $ref: '#/components/schemas/s_VerificationProcessId'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /user/{userId}/verification/{verificationId}:
    post:
      summary: Verify process
      tags:
        - usermgmt
      operationId: doVerify
      description: Send verification code to verify the user
      parameters:
        # path
          - $ref: '#/components/parameters/p_UserIdPath'
          - $ref: '#/components/parameters/p_VerificationIdPath'
        # header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
          - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  $ref: '#/components/schemas/s_UserCode'
      responses:
        '204':
          description: Verification process closed succesfully
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /user/{userId}/code:
    post:
      summary: Set mobilepayment pin code
      tags:
        - usermgmt
      operationId: setCode
      description: Set pin code for payment transaction
      parameters:
        #path
          - $ref: '#/components/parameters/p_UserIdPath'
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
          - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                verificationData:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/s_VerificationProcessId'
                    code:
                      $ref: '#/components/schemas/s_UserCode'
                mp:
                  $ref: '#/components/schemas/s_UserCode'
        description: Code
      responses:
        '204':
          description: Success PIN registration
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /user/{userId}/refresh:
    post:
      summary: Refresh token
      tags:
        - usermgmt
      operationId: refreshToken
      description: Refresh user session token. A token is valid for 2 hours. The response contains the token and the expiry date as well.
      parameters:
        #path
          - $ref: '#/components/parameters/p_UserIdPath'
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
          - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refreshToken:
                  $ref: '#/components/schemas/s_refreshToken'
        description: Refresh token
      responses:
        '201':
          description: Success refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_UserDataWoPin'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /user/{userId}/token:
    post:
      summary: Set push token
      tags:
        - usermgmt
      operationId: setPushToken
      description: Set push token (per application Id)
      parameters:
        #path
          - $ref: '#/components/parameters/p_UserIdPath'
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
          - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                platform:
                  type: string
                  description: Operation system
                  enum:
                    - ANDROID
                    - IOS
                pushToken:
                  $ref: '#/components/schemas/s_PushToken'
        description: Push token to be set
      responses:
        '204':
          description: Success token registration
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /user/{userId}/logout:
    post:
      summary: Logout
      tags:
        - usermgmt
      operationId: UserLogout
      description: Log out from an application (referenced by applicationId)
      parameters:
        #path
          - $ref: '#/components/parameters/p_UserIdPath'
        #header
          - $ref: '#/components/parameters/p_msgcntx_src'
          - $ref: '#/components/parameters/p_msgcntx_id'
          - $ref: '#/components/parameters/p_msgcntx_os'
          - $ref: '#/components/parameters/p_msgcntx_ts'           
          - $ref: '#/components/parameters/p_msgcntx_vrs'
          - $ref: '#/components/parameters/p_msgcntx_lang'
          - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '204':
          description: Success logout
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  # General functions
  /{userId}/vehicle:              
    get:
      summary: Query vehicels
      tags:
        - general
      operationId: getVehicles
      description: Get the vehicles by customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Stored vehicles
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_Vehicle'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Save vehicle
      tags:
        - general
      operationId: addVehicle
      description: Save a new vehicle
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/s_VehicleWoId'
        description: Highway vignette to be purchased
      responses:
        '201':
          description: Saved vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Vehicle'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The vehicle already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /{userId}/vehicle/{vehicleId}:
    delete:
      summary: Delete a vehicle
      tags:
        - general
      operationId: deleteVehicle
      description: Delete vehicle specified by id
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_VehicleIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '204':
          description: Succesful delete
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    patch:
      summary: Modify a vehicle
      tags:
        - general
      operationId: modifyVehicle
      description: Modify vehicle specified by its id
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_VehicleIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/s_VehicleWoId'
      responses:
        '200':
          description: Succesful modification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Vehicle'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /{userId}/dashboard:
    get:
      summary: Query user's dashboard
      tags:
        - general
      operationId: getDashboard
      description: Get the dashboard for specified user to display a summary of services
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'

      responses:
        '200':
          description: Dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_DashboardInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /webmobilepayment/v2/service/{userId}/dashboard:
    get:
      summary: Query user's dashboard and banners
      tags:
        - general
      operationId: getDashboardV2
      description: Get the dashboard for specified user to display a summary of services and banners
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'

      responses:
        '200':
          description: Dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_DashboardInfoV2'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /version:
    get:
      summary: Check if new version is available
      tags:
        - general
      operationId: checkVersion
      description: Check if the current version which is installed is the newest
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
      responses:
        '200':
          description: Info about the available version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_VersionInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /{userId}/setting:
    get:
      summary: Get menu settings
      tags:
        - general
      operationId: getSetting
      description: Get app setting
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Setting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_AppSetting'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Add app setting
      tags:
        - general
      operationId: setSettings
      description: set app setting operation
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/s_AppSetting'
        description: New app settings
      responses:
        '204':
          description: Set succesfully
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /{userId}/rating:
    post:
      summary: Send rating data
      tags:
        - general
      operationId: sendRating
      description: Send rating
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/s_Rating'
        description: New app settings
      responses:
        '204':
          description: Set succesfully
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /{userId}/balance:              
    get:
      summary: Query balance
      tags:
        - general
      operationId: getBalance
      description: Get the balance of customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Available balances
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnSum:
                    type: number
                    example: 5000
                  balances:
                    type: array
                    items:
                      $ref: '#/components/schemas/s_Balance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /banners/{bannerId}/image:              
    get:
      summary: Query banner image
      tags:
        - general
      operationId: getBannerImage
      description: Get Image of the specified banner
      parameters:
        #path
        - $ref: '#/components/parameters/p_BannerIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Banners to be displayed
          content:
            image/png:
              schema: 
               type: string
               format: binary
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /{userId}/info:              
    get:
      summary: Query user data
      tags:
        - general
      operationId: getUserData
      description: Get the data of a customer
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        # query
        - name: personalData
          in: query
          description: true if personal data is required in the response
          schema:
            type: boolean
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  mpayId:
                    $ref: '#/components/schemas/s_UserId'
                  msisdn:
                    $ref: '#/components/schemas/s_MSISDN'
                  status:
                    type: string
                    enum: [ACTIVE,DELETED,INACTIVE,SUSPENDED]
                    example: ACTIVE
                  type:
                    type: number
                    example: 1
                  isBusiness:
                    type: boolean
                  personalData:
                    type: object
                    properties:
                        type:
                          type: string
                          description: Type in the Customer Hub
                          enum: [INDIVIDUAL,ORGANIZATION]
                          example: INDIVIDUAL
                        individualData:
                          type: object
                          properties:
                            fullName:
                              type: string
                              example: "Tóthné Horváth Mária"
                            fulladdress:
                              type: string
                              example: "1097 Budapest IX. ker., Könyves Kálmán krt. 36."
                            motherMaidenName:
                              type: string
                              example: "Teszt Mária"
                            birthDate:
                              type: string
                              format: date
                              example: "1971-03-27"
                            placeOfBirth:
                              type: string
                              example: "Budapest"
                            emailAddress:
                              type: string
                        organizationData:
                          type: object
                          properties:
                            fullName:
                              type: string
                            firmRegistryNumber:
                              type: string
                            fulladdress:
                              type: string
                            emailAddress:
                              type: string
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /textbook:
    get:
      summary: query textbook
      tags:
        - general
      operationId: getTextbook
      description: Returns the latest texts based on the application version and platform type
      parameters:
        #query
        - $ref: '#/components/parameters/p_TextbookVersion'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
      responses:
        '200':
          description: Info about the available version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_TextBook'
        '304':
          description: Not Modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'              
  
  
  # Highway vignette service
  /{userId}/transactions/highway:
    get:
      summary: Query highway transaction
      tags:
        - highway
      operationId: getVignetteHistory
      description: Get the highway vignette transactions by customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
          # TODO lastId, lastTimestamp? status esetleg?
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'

      responses:
        '200':
          description: HV transactions
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_HighwayTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Highway vignette purchase
      tags:
        - highway
      operationId: purchaseVignette
      description: Highway vignette purchase operation
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
                allOf:
                  - $ref: '#/components/schemas/s_HighwayVignettePurchaseRequestDetails'
                  - $ref: '#/components/schemas/s_SMSNotifRequired'
                  - $ref: '#/components/schemas/s_PushNotifRequired'
                  - $ref: '#/components/schemas/s_PIN'
        description: Highway vignette to be purchased
      responses:
        '201':
          description: Succesful purchase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_HighwayTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /{userId}/transactions/highway/{corsisId}:
    get:
      summary: get a specified highway purchase transaction
      tags:
        - highway
      operationId: getVignetteById
      description: Get a purchased highway vignette
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CorsisId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: HV transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_HighwayTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /highway/info:
    get:
      summary:  Query highway vignette info
      tags:
        - highway
      operationId: getVignetteInfo
      description: Get highway vignette info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: HV service Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  preemptionPeriod:
                    type: object
                    description: Preemption period
                    properties:
                      start:
                        type: string
                        format: date
                        description: Start of the period in MM.DD format
                        example: 2021-12-07
                      end:
                        type: string
                        format: date
                        description: End of the period in MM.DD format
                        example: 2021-12-31
                  countyPeriod:
                    type: object
                    description: Preemption period
                    properties:
                      start:
                        type: string
                        format: date
                        description: Start of the period in MM.DD format
                        example: 2021-01-01
                      end:
                        type: string
                        format: date
                        description: End of the period in MM.DD format
                        example: 2021-11-30
                      notification:
                        type: string
                        description: Start of the period in MM.DD format
                        example: '2021.12.01-től nem vásárolhatóak a megyi matricák az év végégig'
                  highwayVignettes:
                    type: array
                    items:
                         $ref: '#/components/schemas/s_HighwayVignetteInfo'
                  costChange:
                    $ref: '#/components/schemas/s_CostChanegHighwayVignetteInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  # Parking service
  /{userId}/transactions/parking:
    get:
      summary: Query parking transaction
      tags:
        - parking
      operationId: getParkingHistory
      description: Get the highway vignette transactions by customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        # TODO lastId, lastTimestamp? status - aktív/nem aktív
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Parking transactions
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_ParkingTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Start parking or purchase parking ticket
      tags:
        - parking
      operationId: startParking
      description: Parking start operation
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/s_ParkingRequestDetails'
              - $ref: '#/components/schemas/s_RecurringSMS'
              - $ref: '#/components/schemas/s_SMSNotifRequired'
              - $ref: '#/components/schemas/s_PushNotifRequired'
              #- $ref: '#/components/schemas/s_ParkingNotifDetails'
              - $ref: '#/components/schemas/s_PIN'
        description: Parking transaction data
      responses:
        '201':
          description: Succesful start/purchase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_ParkingTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error' 
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    
  /{userId}/transactions/parking/{corsisId}:
    get:
      summary: get a specified parking transaction
      tags:
        - parking
      operationId: getParkingById
      description: Get a parking transaction
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CorsisId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Parking transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_ParkingTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    delete:
      summary: Stop or cancel parking
      tags:
        - parking
      operationId: stopParking
      description: Stop or cancel parking
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CorsisId'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Parking transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_ParkingTransaction'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /parking/info:
    get:
      summary:  Query parking info
      tags:
        - parking
      operationId: getParkingInfo
      description: Get highway vignette info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        - $ref: '#/components/parameters/p_zone_version'
      responses:
        '200':
          description: Parking service info
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/s_ParkingInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  # Gambling service
  /gambling/info:
    get:
      summary:  Query gambling info
      tags:
        - gambling
      operationId: getGamblingInfo
      description: Get gambling info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Gambling service info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_GamblingInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /gambling/info/lotto5:
    get:
      summary:  Query Lotto 5 info
      tags:
        - gambling
      operationId: getLotto5Info
      description: Get lotto 5 info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Lotto 5 info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_Lotto5Info'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /gambling/info/lotto6:
    get:
      summary:  Query Lotto 6 info
      tags:
        - gambling
      operationId: getLotto6Info
      description: Get lotto 6 info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Lotto 6 info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_Lotto6Info'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /gambling/info/lotto7:
    get:
      summary:  Query Lotto 7 info
      tags:
        - gambling
      operationId: getLotto7Info
      description: Get lotto 7 info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Lotto 7 info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'         
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_Lotto7Info'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /gambling/info/eurojackpot:
    get:
      summary:  Query EuroJackpot info
      tags:
        - gambling
      operationId: getEuroJackpotInfo
      description: Get EuroJackpot info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: EuroJackpot info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_EuroJackpotInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /gambling/info/putto:
    get:
      summary:  Query Putto info
      tags:
        - gambling
      operationId: getPuttoInfo
      description: Get putto info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Putto info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_PuttoInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /gambling/info/toto:
    get:
      summary:  Query Toto info
      tags:
        - gambling
      operationId: getTotoInfo
      description: Get toto info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Toto info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_TotoInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /gambling/info/toto/current:
    get:
      summary:  Query current Toto info
      tags:
        - gambling
      operationId: getCurrentTotoInfo
      description: Get toto info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Toto info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_TotoInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /gambling/info/keno:
    get:
      summary:  Query Keno info
      tags:
        - gambling
      operationId: getKenoInfo
      description: Get Keno info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Keno info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_KenoInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /gambling/info/napimazli:
    get:
      summary:  Query Napi mázli info
      tags:
        - gambling
      operationId: getNapiMazliInfo
      description: Get Napi mázli info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Napi mázli info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_NapiMazliInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /gambling/info/joker:
    get:
      summary:  Query Joker info
      tags:
        - gambling
      operationId: getJokerInfo
      description: Get Joker info
      parameters:
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        # query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_DateOfLastKnownDraw'
      responses:
        '200':
          description: Joker info
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_JokerInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /{userId}/transactions/gambling:
    get:
      summary: Query gambling transactions
      tags:
        - gambling
      operationId: getGamblingTransaction
      description: Get the gambling transactions by customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_GamblingType'
        - $ref: '#/components/parameters/p_QueryId'
        # TODO lastBetId, lastBetTimestamp? status esetleg?
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Gambling transactions
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_BetGambling'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Create gambling bet
      tags:
        - gambling
      operationId: createGamblingBet
      description: Gambling bet create operation
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema: 
              allOf:
              - $ref: '#/components/schemas/s_GamblingRequest'
              - type: object
                properties:
                  favourites:
                    type: array
                    items:
                      $ref: '#/components/schemas/s_FavNumbers'
              - $ref: '#/components/schemas/s_PIN'
        description: LottoGambling bet request data (if joker is bet as well, the type has not to contain this info)
      responses:
        '201':
          description: Succesful bet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_BetGambling'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /gambling/{userId}/favnumbers:
    get:
      summary: Query favourite numbers
      tags:
        - gambling
      operationId: getFavNumber
      description: Get the favourite numbers of customer
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_GamblingType'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Stored favourite numbers
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_FavNumbersEntity'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /gambling/{userId}/favnumbers/{favNumberId}:
    delete:
      summary: Delete a stored favourite numbers entity
      tags:
        - gambling
      operationId: deleteFavNumber
      description: Delete favourite numbers entity specified by id
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_FavNumberIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '204':
          description: Succesful delete
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        
# Product service
  /product/facadeElements:
    get:
      summary: Query facadeElements
      tags:
        - product
      operationId: getFacadeElements
      description: |
        Query facadeElemnts
      parameters:
        # headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Facade elements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_FacadeElement'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '409':
          description: The client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /product/cities:
    get:
      summary: Query available cities
      tags:
        - product
      operationId: cityQuery
      description: Get the cities provide services
      parameters:
      # headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Cities to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_CityAndOwnerList'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /product/{userId}/products:
    get:
      summary: Query products
      tags:
        - product
      operationId: getProducts
      description: Get the available and purchased products
      parameters:
        #path params
        - $ref: '#/components/parameters/p_UserIdPath'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        #query params
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_ProductId'
        - $ref: '#/components/parameters/p_OwnerId'
        - $ref: '#/components/parameters/p_CityId'
        - $ref: '#/components/parameters/p_FixType'
        - $ref: '#/components/parameters/p_ProductType'
        - $ref: '#/components/parameters/p_ValidityStart'
        - $ref: '#/components/parameters/p_ValidityEnd'
        - $ref: '#/components/parameters/p_TicketState'
      responses:
        '200':
          description: List of queried products
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                properties:
                  available:
                    type: array
                    items:
                      $ref: '#/components/schemas/s_Product'
                  purchased:
                    type: array
                    items:
                      allOf:
                      - $ref: '#/components/schemas/s_PurchasedProduct'
                      - $ref: '#/components/schemas/s_AdditionalPurchaseData'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /product/{userId}/products/distance:
    get:
      summary: Query products by distance
      tags:
        - product
      operationId: getProductsByDistance
      description: Get the available products by distance
      parameters:
        #path params
        - $ref: '#/components/parameters/p_UserIdPath'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        #query params
        - $ref: '#/components/parameters/p_TransportLineId'
        - $ref: '#/components/parameters/p_DepartureTransportStationId'
        - $ref: '#/components/parameters/p_ArrivalTransportStationId'
        - $ref: '#/components/parameters/p_Combined'
      responses:
        '200':
          description: List of queried products
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/s_Product'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /product/{userId}/purchases:
    post:
      summary: purchase products
      tags:
        - product
      operationId: purchase
      description: |
        Purchase some products
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                products:
                    type: array
                    items:
                      $ref: '#/components/schemas/s_ProductToPurchase'
                mp:
                 $ref: '#/components/schemas/s_UserCode'
        description: Purchase object
      responses:
        '201':
          description: Success purchase
          content:
            application/json:
              schema:
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/s_PurchasedProduct'
                  cartId:
                    $ref: '#/components/schemas/s_CartId'
                  paymentId:
                    $ref: '#/components/schemas/s_PaymentId'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /product/{userId}/purchases/{purchaseId}:
    get:
      summary: Query a purchased product identifying by purchaseId
      tags:
        - product
      operationId: getPurchasedProductInfo
      description: Get a purchased product
      parameters:
        #path params
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_PurchaseIdPath'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: The queried product
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/s_PurchasedProduct'
                - $ref: '#/components/schemas/s_AdditionalPurchaseData'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    delete:
      summary: Refund a purchased product identifying by purchaseId
      tags:
        - product
      operationId: StornoProduct
      description: Refund a purchased product
      parameters:
        #path params
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_PurchaseIdPath'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        - $ref: '#/components/parameters/p_PurchaseTokenId' #hashelni kellene. esetleg a purchaseId-val együtt
        - $ref: '#/components/parameters/p_UserCode'
      responses:
        '204':
          description: Success deletion
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    patch:
      summary: Assign a purchased product/group to an other client  or toggle automatic repurchase
      tags:
        - product
      operationId: assignPurchaseToOtherDevice
      description: |
        The destination client initiates the operation
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_PurchaseIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                clientId:
                  $ref: '#/components/schemas/s_ClientId'
                autoRePurchase:
                  type: boolean
        description: Id of the new owner client or enable/disable autoRePurchase
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/s_PurchasedProduct'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /product/{userId}/purchases/{purchaseId}/validate:
    post:
      summary: Valdate a product
      tags:
        - product
      operationId: validate
      description: |
        Validate a product identifying by its purchaseId
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_PurchaseIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  $ref: '#/components/schemas/s_Code'
                purchaseTokenId:
                  $ref: '#/components/schemas/s_PurchaseTokenId'
        description: Aztec code and the token of the product
      responses:
        '201':
          description: Success validate - product.purchaseTokenId is the new purchaseTokenId
          content:
            application/json:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/s_PurchasedProduct'
                  secret:
                    $ref: '#/components/schemas/s_Secret'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /product/{userId}/purchases/{purchaseId}/newProductToken:
    post:
      summary: Request a new token
      tags:
        - product
      operationId: newToken
      description: |
        Request a new product token (validate without code)
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_PurchaseIdPath'
        #header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        content:
          application/json:
            schema:
              description: Old product token identifier
              properties:
                purchaseTokenId:
                  $ref: '#/components/schemas/s_PurchaseTokenId'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/s_PurchasedProduct'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
# Transport service
  /transport/{userId}/undergroundLine:
    get:
      summary: Query underground lines
      tags:
        - transport
      operationId: getUndergroundLines
      description: |
        Query undergroundStations
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Underground Lines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_UndergroundLine'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /transport/{userId}/line:
    get:
      summary: Query transport line
      tags:
        - transport
      operationId: transportLineQuery
      description: Get transport lines
      parameters:
      #path
        - $ref: '#/components/parameters/p_UserIdPath'
      #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        - $ref: '#/components/parameters/p_TransportLineName'
        - $ref: '#/components/parameters/p_TransportLineStatus'
      # headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Transport line list
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_TransportLine'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  /transport/{userId}/line/{transportLineId}/station:
    get:
      summary: Query transport  station
      tags:
        - transport
      operationId: getTransportStation
      description: Get transport stations
      parameters:
        #path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_TransportLineIdPath'
        #query
        - $ref: '#/components/parameters/p_TransportLineStatus'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Cities to add
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_TransportStation'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

# Insurance
  /{userId}/insurance/info:
    get:
      summary:  Query travel insurance info
      tags:
        - insurance
      operationId: getInsuranceInfo
      description: Get travel insurance info
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Insurance service Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  insuranceInfo:
                    type: object
                    description: Insurance prices
                    properties:
                      packages:
                        type: array
                        items:
                          $ref: '#/components/schemas/s_InsurancePackageInfo'
                      termsInfo:
                        type: array
                        items:
                          $ref: '#/components/schemas/s_InsuranceTermsInfo'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  
  /{userId}/transactions/insurance:
    get:
      summary:  Query travel insurance transactions
      tags:
        - insurance
      operationId: getInsurances
      description: Get travel insurance transactions
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        #query
        - $ref: '#/components/parameters/p_Count'
        - $ref: '#/components/parameters/p_Offset'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Travel insurance transactions
          headers:
            count-reached:
              schema:
                $ref: '#/components/schemas/s_CountReached'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/s_OrderedInsurance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    post:
      summary: Order an insurance package
      tags:
        - insurance
      operationId: orderInsurance
      description: Create a new insurance order with the selected main and additional packages.
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                packageId:
                  $ref: '#/components/schemas/s_InsuranceId'
                additionalIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/s_InsuranceId'
                  description: List of IDs for the additional insurance packages
                  example: ["WINTER_PLUS", "SPORT_PLUS"]
                acceptedTermsIds:
                  type: array
                  items:
                    type: string
                  example: [adatkezeles,ibid]
                mp:
                 $ref: '#/components/schemas/s_UserCode'
              required:
                - mainPackageId
                - mp
      responses:
        '201':
          description: Insurance ordered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_OrderedInsurance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'

  /{userId}/transactions/insurance/{coverageId}:
    get:
      summary:  Query travel insurance transaction by id
      tags:
        - insurance
      operationId: getInsuranceById
      description: Get a travel insurance transactions
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CoverageId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      responses:
        '200':
          description: Travel insurance transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_OrderedInsurance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    delete:
      summary: Cancel an existing insurance
      tags:
        - insurance
      operationId: cancelInsurance
      description: Cancel insurance
      parameters:
        #path params
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CoverageId'
        #headers
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
        - $ref: '#/components/parameters/p_UserCode'

      responses:
        '200':
          description: Travel insurance transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_OrderedInsurance'
        '204':
          description: Success deletion
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
  /{userId}/transactions/insurance/{coverageId}/wallet:  
    post:
      summary: Create walletData for a specified platform
      tags:
        - insurance
      operationId: createInsuranceWallet
      description: Create walletData for a specified platform to an existing insurance
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CoverageId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platform:
                  type: string
                  description: Operation system
                  enum:
                    - ANDROID
                    - IOS
      responses:
        '201':
          description: WalletData for the insurance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_WalletData'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
    
  /{userId}/transactions/insurance/{coverageId}/modify:  
    post:
      summary: Modify travel insurance
      tags:
        - insurance
      operationId: modifyInsurance
      description: Modify the main and additional packages of an existing insurance
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CoverageId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPackage:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/s_InsuranceId'
                    additionalIds:
                      type: array
                      items:
                        $ref: '#/components/schemas/s_InsuranceId'
                      example: ["WINTER_PLUS", "SPORT_PLUS"]
                newAdditionalIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/s_InsuranceId'
                  description: List of IDs for the additional insurance packages
                  example: ["WINTER_PLUS", "SPORT_PLUS"]
                canceledAdditionalIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/s_InsuranceId'
                  description: List of IDs for the additional insurance packages
                  example: ["adeaWINTER_PLUS", "SPORT_PLUS"]
                acceptedTermsIds:
                  type: array
                  items:
                    type: string
                  example: [adatkezeles,ibid]
                mp:
                 $ref: '#/components/schemas/s_UserCode'
              required:
                - mp
      responses:
        '200':
          description: Insurance modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_OrderedInsurance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
  
  /{userId}/transactions/insurance/{coverageId}/restore:
    post:
      summary: Restore travel insurance
      tags:
        - insurance
      operationId: restoreInsurance
      description: Restore a cancelled insurance order
      parameters:
        # path
        - $ref: '#/components/parameters/p_UserIdPath'
        - $ref: '#/components/parameters/p_CoverageId'
        # header
        - $ref: '#/components/parameters/p_msgcntx_src'
        - $ref: '#/components/parameters/p_msgcntx_id'
        - $ref: '#/components/parameters/p_msgcntx_os'
        - $ref: '#/components/parameters/p_msgcntx_ts'           
        - $ref: '#/components/parameters/p_msgcntx_vrs'
        - $ref: '#/components/parameters/p_msgcntx_lang'
        - $ref: '#/components/parameters/p_msgcntx_token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mp:
                 $ref: '#/components/schemas/s_UserCode'
              required:
                - mp
      responses:
        '200':
          description: Insurance modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_OrderedInsurance'
        '400':
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
        '503':
          description: Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/s_Error'
                
components:
  parameters:
    p_UserIdPath:
      in: path
      name: userId
      description: Subscription is identified by mpayId as userid
      required: true
      schema:
        $ref: '#/components/schemas/s_UserId'
    p_LoginIdPath:
      in: path
      name: loginId
      description: Identifier of Login session
      required: true
      schema:
        $ref: '#/components/schemas/s_VerificationProcessId'
    p_VerificationIdPath:
      in: path
      name: verificationId
      description: Identifier of verification process
      required: true
      schema:
        $ref: '#/components/schemas/s_VerificationProcessId'
    p_CorsisId:
      in: path
      name: corsisId
      description: Corsis transaction Id
      required: true
      schema:
        $ref: '#/components/schemas/s_CorsisId'
    p_CoverageId:
      in: path
      name: coverageId
      description: CoverageId of travel insurance
      required: true
      schema:
        type: string
    p_QueryId:
      in: query
      name: id
      description: Corsis transaction Id
      required: false
      schema:
        $ref: '#/components/schemas/s_CorsisId'
    p_VehicleIdPath:
      in: path
      name: vehicleId
      description: Vehicle identifier
      required: true
      schema:
        $ref: '#/components/schemas/s_CorsisId'
    p_FavNumberIdPath:
      in: path
      name: favNumberId
      description: Favourite number identifier
      required: true
      schema:
        $ref: '#/components/schemas/s_CorsisId'
    p_MSISDN:
      in: path
      name: msisdn
      description: Phone number of customer
      required: true
      schema:
        $ref: '#/components/schemas/s_MSISDN'
    p_Count:
      name: count
      required: false
      in: query
      description: Requested number of resources to be provided in response.
      schema:
        type: integer
        minimum: 1
    p_Offset:
      name: offset
      required: false
      in: query
      description: Page number. 0 means the first one
      schema:
        type: integer
        minimum: 0
    p_GamblingType:
      in: query
      name: type
      description: Type of gambling
      required: false
      schema:
        $ref: '#/components/schemas/s_GamblingType'
    p_DateOfLastKnownDraw:
      name: dateOfLastKnownDraw
      required: false
      in: query
      description: Date of last known draw
      schema:
        $ref: '#/components/schemas/s_GamblingDateTime'
    p_ValidityStart:
      in: query
      name: validityStart
      description: Start time of the ticket's validity
      required: false
      schema:
        $ref: '#/components/schemas/s_Timestamp'
    p_ValidityEnd:
      in: query
      name: validityEnd
      description: End time of the ticket's validity
      required: false
      schema:
        $ref: '#/components/schemas/s_Timestamp'
    p_TextbookVersion:
      in: query
      name: textbookVersion
      description: Version of textbook
      required: false
      schema:
        $ref: '#/components/schemas/s_TextbookVersion'
    p_msgcntx_src:
      name: msgcntx_src
      description: 'Name of the source client, the sender party of the reqeust. This is the ApplicationID'
      in: header
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 64
    p_msgcntx_os:
      name: msgcntx_env
      description: 'Identifier of the operation system and version (e.g. Android 10.0, iOS 10.0).'
      in: header
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 32
    p_msgcntx_id:
      name: msgcntx_id
      description: UUID of the message like 'f257ba66-75cf-4921-affa-5fb06f5ca20e'
      in: header
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 40
    p_msgcntx_ts:
      name: msgcntx_ts
      description: Timestamp of the request
      in: header
      required: true
      schema:
        type: string
        format: date-time
    p_msgcntx_vrs:
      name: msgcntx_vrs
      description: "The platform name and the current version of the application at the following format: {platform}-{version number}"
      in: header
      required: true
      schema:
        type: string
        maxLength: 16
        example: "Android-2.0" 
    p_msgcntx_lang:
      name: msgcntx_lang
      description: Language of the application
      in: header
      required: true
      schema:
        type: string
        enum:
          - HU
          - EN
        example: "HU"
    p_zone_version:
      name: zone_version
      description: Zone version
      in: header
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 32
    p_msgcntx_token:
      name: msgcntx_token
      description: Session token
      in: header
      required: true
      schema:
        $ref: '#/components/schemas/s_UserSessionToken'
    p_BannerIdPath:
      in: path
      name: bannerId
      description: Subscription is identified by mpayId as userid
      required: true
      schema:
        $ref: '#/components/schemas/s_BannerId'
    p_ProductType:
      in: query
      name: productType
      description: Type of the products to be queried
      required: false
      schema:
        $ref: '#/components/schemas/s_ProductType'
    p_PurchaseIdPath:
      in: path
      name: purchaseId
      description: Id of a specified purchasedProduct
      required: true
      schema:
        $ref: '#/components/schemas/s_PurchaseId'
    p_ProductId:
      in: query
      name: productId
      description: Identifier of the product
      required: false
      schema:
        $ref: '#/components/schemas/s_ProductId'
    p_OwnerId:
      in: query
      name: ownerId
      description: Identifier of the product owner
      required: false
      schema:
        $ref: '#/components/schemas/s_OwnerId'
    p_CityId:
      in: query
      name: cityId
      description: Identifier of the city
      required: false
      schema:
        $ref: '#/components/schemas/s_CityId'
    p_FixType:
      in: query
      name: fixType
      description: Type of the product
      required: false
      schema:
        $ref: '#/components/schemas/s_FixType'
    p_TicketState:
      in: query
      name: ticketState
      description: It can be active or inactive. If you want to get the not invalid products you have to choose "active" value.
      required: false
      schema:
        $ref: '#/components/schemas/s_TicketState'
    p_PurchaseTokenId:
      in: header
      name: purchaseTokenId
      required: true
      description: Purchase token id which provides access to the product
      schema:
        $ref: '#/components/schemas/s_PurchaseTokenId'
    p_UserCode:
      in: header
      name: mp
      required: true
      description: Verification or PIN code
      schema:
        $ref: '#/components/schemas/s_UserCode'
    p_TransportLineIdPath:
      in: path
      name: transportLineId
      description: Transport line id
      required: true
      schema:
        $ref: '#/components/schemas/s_TransportLineId'
    p_TransportLineId:
      in: query
      name: transportLineId
      description: Transport line id
      required: true
      schema:
        $ref: '#/components/schemas/s_TransportLineId'
    p_DepartureTransportStationId:
      in: query
      name: departureTransportStationId
      description: Departure Transport Station Id
      required: true
      schema:
        $ref: '#/components/schemas/s_TransportStationId'
    p_ArrivalTransportStationId:
      in: query
      name: arrivalTransportStationId
      description: Arrival Transport Station Id
      required: true
      schema:
        $ref: '#/components/schemas/s_TransportStationId'
    p_Combined:
      in: query
      name: combined
      required: false
      schema:
        type: boolean
    p_TransportLineName:
      in: query
      name: name
      description: Transport line name 
      required: false
      schema:
        $ref: '#/components/schemas/s_TransportLineName'
    p_TransportLineStatus:
      in: query
      name: status
      description: It can be active or inactive. 
      required: false
      schema:
        $ref: '#/components/schemas/s_TransportLineStatus'
  schemas:
    s_UserId:
      type: string
      example: '687ASDUKJHSD8763KEW7FO27FEWO83'
      description: Identifier of the customer. It is the MPAY ID from Corsis
    s_MSISDN:
      type: string
      pattern: '^36[0-9]{9}$'
      example: '36201234567'
      description: Phone number of the subscription
    s_CountReached:
      type: boolean
      description: True, if the count of the queried data is more or equals than the requested by count header parameter
      example: false
    s_Login:
      type: object
      description: User action request body
      properties:
        msisdn:
          $ref: '#/components/schemas/s_MSISDN'
    s_UserCode:
      type: string
      description: Verification or PIN code
      pattern: \d{4}
      example: "1234"
    s_PushToken:
      type: string
      #TODO ÉK
    s_UserSessionToken:
      type: string
      description: Token which has to be used in all communications. It is valid for 2 hours
      format: uuid
    s_refreshToken:
      description: Token for refresh
      type: string
      maxLength: 128
    s_AppSetting:
      type: object
      description: App menu setting
      allOf:
        - $ref: '#/components/schemas/s_PushNotifs'
    s_PushNotifs:
      type: object
      description: Push notification settings
      properties:
        hvValidityEnd:
          type: boolean
        parkingEnd:
          type: boolean
        lotto5Notif:
          type: boolean
        lotto6Notif:
          type: boolean
        lotto7Notif:
          type: boolean
        productExpired:
          type: boolean
    s_Rating:
      type: object
      description: Raiting
      properties:
        rating:
          type: integer
          minimum: 0
          maximum: 100
          example: 3
        feedback:
          description: Token for refresh
          type: string
          maxLength: 2048
          example: 'A matricavásáslrás jó, de parkolást nehéz indítani'
    s_UserDataWoPin:
      type: object
      description: User entity with userId and PIN if the user has a stored one
      properties:
        ui:
          $ref: '#/components/schemas/s_UserId'
        mt:
          $ref: '#/components/schemas/s_UserSessionToken'
        te:
          $ref: '#/components/schemas/s_Timestamp'
    s_UserData:
      type: object
      description: User entity with userId and PIN if the user has a stored one
      allOf:
        - $ref: '#/components/schemas/s_UserDataWoPin'
        - type: object
          properties:
            mp:
              $ref: '#/components/schemas/s_UserCode'
    s_UserLoginData:
      type: object
      description: User Login data
      properties:
        ui:
          $ref: '#/components/schemas/s_UserId'
        loginId:
          $ref: '#/components/schemas/s_VerificationProcessId'
    s_VersionInfo:
      type: object
      description: Info about the available version
      required: [hasNewVersion]
      properties:
        hasNewVersion:
          type: boolean
          example: true
        forceUpgrade:
          type: boolean
          example: true
        newVersion:
          type: string
          maxLength: 10
          example: "2.0"
        notification:
          type: string
          maxLength: 96
          example: Telepítd az új verziót, hogy használhasd a Volán termékeket is
    s_VerificationProcessId:
      type: integer
      description: Verification process id
      format: int64
      example: 1232414142
    s_CorsisId:
      type: integer
      format: int64
      description: Corsis transaction id
      example: 12434264
    s_BannerId:
      type: integer
      description: Banner id
      format: int64
      example: 23424320
    s_ClientId:
      type: string
      minLength: 0
      maxLength: 127
      description: Identifier of the client. e.g application id
      example: askji6ask34-dou3-ds98zf3
    s_DashboardInfo:
      type: array
      items:
        description: Info element for dashboard
        properties:
          service:
            type: string
            enum:
              - HIGHWAY
              - PARKING
              - GAMBLING
              - PRODUCT
              - INFO
          info:
            type: string
            maxLength: 64
          rowNum:
            type: integer
            maximum: 2
          infoType:
            type: string
            enum:
              - ERROR
              - WARN
              - INFO
      example:
        - service: HIGHWAY
          rowNum: 1
          info: "Egy nap múlva Heti matricád lejár"
          infoType: ERROR
        - service: HIGHWAY
          rowNum: 2
          info: "Két nap múlva Pest megyei matricád lejár"
          infoType: ERROR
        - service: PARKING
          rowNum: 1
          info: "Van egy előjegyzett parkolásod"
          infoType: WARN           
    s_DashboardInfoV2:
      type: object
      properties:
        services:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
                enum:
                  - HIGHWAY
                  - PARKING
                  - GAMBLING
                  - PRODUCT
                  - INSURANCE
              orderNumber:
                type: number
            example:
              - service: HIGHWAY
                orderNumber: 1
              - service: PARKING
                orderNumber: 2
              - service: GAMBLING
                orderNumber: 3
              - service: PRODUCT
                orderNumber: 4
              - service: INSURANCE
                orderNumber: 5
        info:
          type: array
          items:
            description: Info element for dashboard
            properties:
              service:
                type: string
                enum:
                  - HIGHWAY
                  - PARKING
                  - GAMBLING
                  - PRODUCT
                  - INSURANCE
                  - INFO
              info:
                type: string
                maxLength: 64
              rowNum:
                type: integer
                maximum: 2
              infoType:
                type: string
                enum:
                  - ERROR
                  - WARN
                  - INFO
          example:
            - service: HIGHWAY
              rowNum: 1
              info: "Egy nap múlva Heti matricád lejár"
              infoType: ERROR
            - service: HIGHWAY
              rowNum: 2
              info: "Két nap múlva Pest megyei matricád lejár"
              infoType: ERROR
            - service: PARKING
              rowNum: 1
              info: "Van egy előjegyzett parkolásod"
              infoType: WARN
        banners:
          type: array
          items:
            $ref: '#/components/schemas/s_Banner'
          example:
            - id: 1
              displayForSeconds: 5
              displayOrder: ABOVE
              tsImageModify: '2023-08-17T09:56:11.950Z'
              tsParamModify: '2023-08-17T09:56:11.950Z'
              altText: "Alternative texts..."
            - id: 15
              title: Simple page
              content: <html><head><title>Example</title></head><body><p>This is an example of a simple HTML page with one paragraph.</p></body></html>
              displayForSeconds: 3
              displayOrder: ABOVE
              tsImageModify: '2023-08-17T09:56:11.950Z'
              tsParamModify: '2023-08-17T09:56:11.950Z'
              altText: "Alternative texts..."
            - id: 5
              link: telekom://dashboard
              fallbackLink: https://www.telekom.hu/lakossagi/ugyintezes/elerhetosegek/telekom-alkalmazas
              displayForSeconds: 10
              displayOrder: ABOVE
              tsImageModify: '2023-08-17T09:56:11.950Z'
              tsParamModify: '2023-08-17T09:56:11.950Z'
              altText: "Alternative texts..."
            - id: 3
              link: https://www.telekom.hu/lakossagi/keszulekek/akcios-keszulekek/samsung-galaxy-zfold5-zflip5
              fallbackLink: https://www.telekom.hu
              displayForSeconds: 5
              displayOrder: UNDER
              tsImageModify: '2023-08-17T09:56:11.950Z'
              tsParamModify: '2023-08-17T09:56:11.950Z'
              altText: "Alternative texts..."
    s_HighwayTransaction:
      type: object
      description: Highway vignette purchase transaction
      properties:
        msisdn:
          $ref: '#/components/schemas/s_MSISDN'
        corsisId:
          $ref: '#/components/schemas/s_CorsisId'
        nmfrId:
          $ref: '#/components/schemas/s_NMFRId'
        trxStart:
          $ref: '#/components/schemas/s_Timestamp'
        trxEnd:
          $ref: '#/components/schemas/s_Timestamp'
        highwayVignette:
          $ref: '#/components/schemas/s_HighwayVignette'
        costInfo:
          $ref: '#/components/schemas/s_HighwayCostInfo'
    s_HighwayVignetteInfo:
      type: object
      description: Highway vignette info
      properties:
        vehicleCategory:
          $ref: '#/components/schemas/s_VehicleCategory'
        vignetteType:
          $ref: '#/components/schemas/s_VignetteType'
        cost:
          $ref: '#/components/schemas/s_CostDouble'
        trxFee:
          $ref: '#/components/schemas/s_CostDouble'
    s_CostChanegHighwayVignetteInfo:
      type: object
      description: Cost change vigenette infp
      properties:
        from:
          type: string
          format: date
          description: Start of the cost change
          example: 2023-01-01
        highwayVignettes:
          type: array
          items:
            $ref: '#/components/schemas/s_HighwayVignetteInfo'
    s_ParkingTransaction:
      type: object
      description: Parking transaction
      properties:
        msisdn:
          $ref: '#/components/schemas/s_MSISDN'
        corsisId:
          $ref: '#/components/schemas/s_CorsisId'
        nmfrId:
          $ref: '#/components/schemas/s_NMFRId'
        trxStart:
          $ref: '#/components/schemas/s_Timestamp'
        trxEnd:
          $ref: '#/components/schemas/s_Timestamp'
        parkingDetails:
          $ref: '#/components/schemas/s_Parking'
        costInfo:
          $ref: '#/components/schemas/s_ParkingCostInfo'
    s_ParkingInfo:
      type: object
      description: Parking info
      properties:
        comfortFee:
          $ref: '#/components/schemas/s_ParkingComfortFeeInfo'
        specialDates:
          $ref: '#/components/schemas/s_SpecialDates'
        parkingStopReminder:
          $ref: '#/components/schemas/s_ParkingStopReminder'
        zoneInfo:
          $ref: '#/components/schemas/s_ParkingZoneInfo'
        zoneVersion:
          $ref: '#/components/schemas/s_ZoneVersion'
    s_SpecialDates:
      type: object
      description: Parking info
      properties:
        extraWorkdays:
          type: array
          items:
            $ref: '#/components/schemas/s_Date'
        extraFreedays:
          type: array
          items:
            $ref: '#/components/schemas/s_Date'
        extraHolidays:
          type: array
          items:
            $ref: '#/components/schemas/s_Date'
    s_ParkingStopReminder:
      type: object
      description: Parking stop reminder
      properties:
        timeThresholdSec:
          type: integer
          example: 300
        enterThresholdMeter:
          type: integer
          example: 250
    s_ParkingComfortFeeInfo:
      type: object
      description: Parking comfort fee info
      properties:
        startStopParking:
          $ref: '#/components/schemas/s_CostDouble'
        ticketParking:
          $ref: '#/components/schemas/s_CostDouble'
        offsiteParking:
          $ref: '#/components/schemas/s_CostDouble'
    s_ParkingZoneInfo:
      type: string
      format: byte
      example: 'EsDBBQACAgIAC95j1EAAAAAAAAAAAAAAAAKAAAAem9uZ'
    s_ZoneVersion:
      type: string
      description: Zone version
      maxLength: 8
      example: "20201215"
    s_NMFRId:
      type: string
      description: NMFR transaction id
      example: "6SHD86SAD6"
    s_HighwayVignette:
      type: object
      properties:
        vignetteNumber:
          $ref: '#/components/schemas/s_VignetteNumber'
        validityStart:
          $ref: '#/components/schemas/s_Timestamp'
        validityEnd:
          $ref: '#/components/schemas/s_Timestamp'
        vehicle:
          $ref: '#/components/schemas/s_VehicleWoId'
        vignetteCategory:
          $ref: '#/components/schemas/s_VignetteCategory'
        vignetteType:
          $ref: '#/components/schemas/s_VignetteType'
    s_Parking:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/s_ParkingStatus'
        startTime:
          $ref: '#/components/schemas/s_Timestamp'
        endTime:
          $ref: '#/components/schemas/s_Timestamp'
        expectedEndTime:
          $ref: '#/components/schemas/s_Timestamp'
        chargeEndTime:
          $ref: '#/components/schemas/s_Timestamp'
        vehicle:
          $ref: '#/components/schemas/s_VehicleWoId'
        isFinished:
          type: boolean
        zoneInfo:
          $ref: '#/components/schemas/s_ZoneInfo'
        isRecurring:
          $ref: '#/components/schemas/s_IsRecurring'
    s_ParkingStatus:
      type: string
      enum:
        - PREPARED
        - RUNING
        - STOPPED
        - CANCELLED
        - EXPIRED
        - FAILED
        - FINISHED
    s_ZoneInfo:
      type: object
      description: Parking zone info
      properties:
        zoneName:
          $ref: '#/components/schemas/s_String50'
        zoneTarif:
          $ref: '#/components/schemas/s_String50'
        isEstimatedTarif:
          type: boolean
        isFixTicketZone:
          type: boolean
        zoneType:
          $ref: '#/components/schemas/s_ZoneType'
        zoneCode:
          $ref: '#/components/schemas/s_String4'
        zoneTarifMultiplier:
          $ref: '#/components/schemas/s_CostDouble'
        city:
          $ref: '#/components/schemas/s_String50'
    s_ZoneType:
      type: string
      enum:
        - ONSITE
        - OFFSITE
    s_String50:
      type: string
      minLength: 0
      maxLength: 50
    s_String4:
      type: string
      minLength: 0
      maxLength: 4
    s_VignetteNumber:
      type: string
      minLength: 4
      maxLength: 22
    s_GamblingInfo:
      type: object
      description: Gambling info
      properties:
        sendSMSHash:
          type: boolean
        showGame:
          $ref: '#/components/schemas/s_ShowGameInfo'
        lotto5:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_Lotto5Info'
        lotto6:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_Lotto6Info'
        lotto7:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_Lotto7Info'
        eurojackpot:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_EuroJackpotInfo'
        putto:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_PuttoInfo'
        toto:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_TotoInfo'
        keno:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_KenoInfo'
        napiMazli:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_NapiMazliInfo'
        joker:
          allOf:
            - $ref: '#/components/schemas/s_BaseGamblingInfo'
            - $ref: '#/components/schemas/s_JokerInfo'
    s_ShowGameInfo:
      type: object
      properties:
        lotto5:
          type: boolean
          example: true
        lotto6:
          type: boolean
          example: true
        lotto7:
          type: boolean
          example: true
        eurojackpot:
          type: boolean
          example: true
        putto:
          type: boolean
          example: true
        keno:
          type: boolean
          example: true
        toto:
          type: boolean
          example: true
        napiMazli:
          type: boolean
          example: true
    s_BaseDrawInfo:
      type: object
      description: Base draw information
      properties:
        drawId:
          type: string
          example: SZ20505
        year:
          type: integer
          example: 2020
        weekOfYear:
          type: integer
          example: 51
        dayOfYear:
          type: integer
          example: 356
        dayOfWeek:
          type: integer
          example: 6          
        drawDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextBetStartDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextBetEndDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextDrawDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextDrawExpectedWin:
          $ref: '#/components/schemas/s_GamblingAmount'
    s_BaseGamblingInfo:
      type: object
      description: Base gambling information
      properties:
        actualPrice:
          $ref: '#/components/schemas/s_GamblingPrice'
        maxBasketPrice:
          $ref: '#/components/schemas/s_GamblingPrice'
    s_DividendsInfo:
      type: object
      description: Dividens information
      properties:
        hit: 
          type: string
        winners:
          type: integer
        amount: 
           $ref: '#/components/schemas/s_GamblingAmount'
        currency:
          $ref: '#/components/schemas/s_CurrencyType'
    s_CurrencyType:
      type: string
      enum:
        - Ft
        - Euro
    s_GamblingAmount:
      type: number
      format: double
      example: 25675.36
    s_DividendsArray:
      type: object
      properties:
        dividends:
          type: array
          items:
            $ref: '#/components/schemas/s_DividendsInfo'
    s_Lotto5Info:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Lotto5'
      - $ref: '#/components/schemas/s_DividendsArray'
    s_Lotto6Info:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Lotto6'
      - $ref: '#/components/schemas/s_DividendsArray'
    s_Lotto7Info:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Lotto7'
      - $ref: '#/components/schemas/s_DividendsArray'
    s_EuroJackpotInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_EuroJackpot'
      - $ref: '#/components/schemas/s_DividendsArray'
      - type: object
        properties:
          nextDrawExpectedWinMrdHuf:
            type: string
            example: 11.2
    s_PuttoInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Putto'
      - type: object
        properties:
          fiveMinuteOfDay:
            type: integer
            example: 158
    s_KenoInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Keno'
    s_NapiMazliInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_NapiMazli'
    s_TotoInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Toto'
    s_JokerInfo:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseDrawInfo'
      - $ref: '#/components/schemas/s_Joker'
      - $ref: '#/components/schemas/s_DividendsArray'
    s_Lotto5:
      type: object
      description: Lotto 5
      properties:
        numbers:
          type: array
          minimum: 5
          maximum: 5
          items:
            $ref: '#/components/schemas/s_Lotto5Number'
          example: [12,23,45,67,86]
    s_GamblingRequest:
      type: object
      description: Gambling request
      properties:
        gamblingType:
          $ref: '#/components/schemas/s_GamblingType'
        price:
          $ref: '#/components/schemas/s_GamblingPrice'
        betcontent:
          $ref: '#/components/schemas/s_BetContent'
        smsBindId:
          type: string
    s_BetContent:
      type: string
      description: Free text which contains the bet info, e.g. fields, weekType, joker info, etc. The content of is field depends on the type of the bet, but it is not any restrictions about the content and the format. It can be json or whatever
      maxLength: 512
    s_GamblingPrice:
      type: number
      minimum: 0
      example: 300.0
    s_GamblingType:
      type: string
      description: Type of gambling
      enum:
        - LOTTO5
        - LOTTO6
        - LOTTO7
        - EUROJACKPOT
        - PUTTO
        - TOTO
        - KENO
        - NAPIMAZLI
        - JOKER
      example: LOTTO5
    s_BetGambling:
      type: object
      allOf:
        - $ref: '#/components/schemas/s_GamblingRequest'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/s_CorsisId'
            timestamp:
               $ref: '#/components/schemas/s_Timestamp'
            status:
              type: string
              enum: 
                - Success
                - WaitForConfirmation
                - Created
                - Failed
            corsisTrxId:
              $ref: '#/components/schemas/s_CorsisId'
            partnerTransactionResultReqTimestamp:
              $ref: '#/components/schemas/s_Timestamp'
            partnerTransactionResultParam1:
              type: string
            partnerTransactionResultParam2:
              type: string
            partnerTransactionResultCode:
              type: integer
    s_Lotto6:
      type: object
      description: Lotto 6
      properties:
        numbers:
          type: array
          minimum: 6
          maximum: 6
          items:
            $ref: '#/components/schemas/s_Lotto6Number'
          example: [3,6,12,23,34,45]
    s_Lotto7:
      type: object
      description: Lotto 7
      properties:
        numbers:
          type: array
          minimum: 7
          maximum: 7
          items:
            $ref: '#/components/schemas/s_Lotto7Number'
          example: [3,6,12,17,23,34,35]
    s_EuroJackpot:
      type: object
      description: Eurojackpot
      properties:
        numbersA:
          type: array
          minimum: 5
          maximum: 5
          items:
            $ref: '#/components/schemas/s_EuroJackpotNumberA'
          example: [3,6,12,27,50]
        numbersB:
          type: array
          minimum: 2
          maximum: 2
          items:
            $ref: '#/components/schemas/s_EuroJackpotNumberB'
          example: [3,10]
    s_Putto:
      type: object
      description: Eurojackpot
      properties:
        todayStartDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        todayEndDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextDayStartDate:
          $ref: '#/components/schemas/s_GamblingDateTime'
        nextDayEndDate:
          $ref: '#/components/schemas/s_GamblingDateTime' 
        numbersA:
          type: array
          minimum: 8
          maximum: 8
          items:
            $ref: '#/components/schemas/s_PuttoNumberA'
          example: [3,5,6,11,12,18,19,20]
        numberB:
          $ref: '#/components/schemas/s_PuttoNumberB'
    s_Keno:
      type: object
      description: Keno
      properties:
        numbers:
          type: array
          minimum: 20
          maximum: 20
          items:
            $ref: '#/components/schemas/s_KenoNumber'
          example: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,80]
    s_NapiMazli:
      type: object
      description: Napi mázli
      properties:
        numbers:
          type: array
          minimum: 8
          maximum: 8
          items:
            $ref: '#/components/schemas/s_NapiMazliNumber'
          example: ["06","09","13","20", "Bögre","77","12","02","10", "Bagoly"]
    s_Toto:
      type: object
      description: Toto
      properties:
        turn:
          type:  number
          example: 1
        results:
          type: array
          minimum: 14
          maximum: 17
          items:
            $ref: '#/components/schemas/s_TotoResult'
        events:
          type: array
          minimum: 14
          maximum: 17
          items:
            $ref: '#/components/schemas/s_TotoEvent'
        dividends:
            type: array
            items:
              $ref: '#/components/schemas/s_DividendsInfo'
    s_Joker:
      type: object
      description: Jopker
      properties:
        numbers:
          type: array
          minimum: 6
          maximum: 6
          items:
            $ref: '#/components/schemas/s_JokerNumber'
          example: [0,2,3,2,8,9]
    s_TotoResult:
      type: object
      properties:
        number:
          type:  number
        winner: 
          type: string
    s_TotoEvent:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        status:
          type: string
        result:
          type: string
        league:
          type: string
        winner:
          type: string
    s_Lotto5Number:
      type: integer
      minimum: 1
      maximum: 90
      example: 1
    s_Lotto6Number:
      type: integer
      minimum: 1
      maximum: 45
      example: 1
    s_Lotto7Number:
      type: integer
      minimum: 1
      maximum: 35
      example: 1
    s_EuroJackpotNumberA:
      type: integer
      minimum: 1
      maximum: 50
      example: 1
    s_EuroJackpotNumberB:
      type: integer
      minimum: 1
      maximum: 10
      example: 1
    s_PuttoNumberA:
      type: integer
      minimum: 1
      maximum: 20
      example: 1
    s_PuttoNumberB:
      type: integer
      minimum: 1
      maximum: 5
      example: 1
    s_KenoNumber:
      type: integer
      minimum: 1
      maximum: 80
      example: 1
    s_NapiMazliNumber:
      type: string
      maxLength: 2
      example: 07
    s_JokerNumber:
      type: integer
      minimum: 0
      maximum: 9
      example: 1
    s_FavNumbers:
      type: string
      description: String which conteins the numbers of a field
      minLength: 1
      maxLength: 256
      example: "1,2,3,4,5"
    s_FavNumbersEntity:
      type: object
      description: A stored favourite numbers object
      properties:
        id:
          $ref: '#/components/schemas/s_CorsisId'
        type:
          $ref: '#/components/schemas/s_GamblingType'
        numbers:
          $ref: '#/components/schemas/s_FavNumbers'
    s_GamblingDateTime:
      type: string
      format: date-time
    s_BaseVehicle:
      type: object
      properties:
        licensePlateNumber:
          $ref: '#/components/schemas/s_LicencePlateNumber'
        countryCode:
          $ref: '#/components/schemas/s_CountryCode'
        category:
          $ref: '#/components/schemas/s_VehicleCategory'
    s_VehicleWoId:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseVehicle'
      - type: object
        properties:
          name:
            $ref: '#/components/schemas/s_String32'
          color:
            $ref: '#/components/schemas/s_Color'
          freeZones:
            $ref: '#/components/schemas/s_FreeZones'
          bluetoothDevice:
            $ref: '#/components/schemas/s_BluetoothAddress'
    s_Vehicle:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_VehicleWoId'
      - type: object
        properties:
          id:
            $ref: '#/components/schemas/s_CorsisId'
    s_Balance:
      type: object
      properties:
        type:
          type: string
          enum: [mcom,telco]
        initAmount:
          type: number
          example: 30000
        actAmount:
          type: number
          example: 11210
        validTo:
          $ref: '#/components/schemas/s_Timestamp'
        warn:
          type: number
          example: 5000
        forbiddenProducts:
          type: array
          items:
            type: string
            enum: [PARKING,HIGHWAY,GAMBLING,PRODUCT]
        restrictions:
          type: array
          items:
            type: object
            properties:
              type: 
                type: string
                enum: [PARKING,HIGHWAY,GAMBLING,PRODUCT]
              expiration:
                type: string
                format: date-time
    s_Banner:
      type: object
      properties:
        id:
          type: string
          description: Banner id
          example: 15
        title:
          type: string
          description: Title of the page if the content should be displayed. Required if the content is not empty
          example: Simple page
        content:
          type: string
          description: Static html page
          example: "<html><head><title>Example</title></head><body><p>This is an example of a simple HTML page with one paragraph.</p></body></html>"
        link:
          type: string
          description: In case of the content is null or empty, the banner refers to a link. Link can be a weblink or a deeplink
          example: https://valami.hu
        fallbackLink:
          type: string
          description: In case of the content is null or empty, the banner refers to a link. If the link parameter is null/empty or the link fails to open, this fallback link should be opened
          example: http://defaultLink
        displayForSeconds:
          type: number
          description: How many seconds the banner should be displayed
          example: 5
        displayOrder:
          type: string
          description: It says the banner to appear above or below the products
          enum: [ABOVE,UNDER]
        tsImageModify:
          $ref: '#/components/schemas/s_Timestamp'
        tsParamModify:
          $ref: '#/components/schemas/s_Timestamp'
        altText:
           type: string 
           description: Alternative texts (e.g., for accessibility or tooltips).
           example: "Alternative texts..."
    s_FreeZones:
      type: array
      items:
        type: string
        example: '3011'
    s_String32:
      type: string
      minLength: 0
      maxLength: 32
      example: name
    s_BluetoothAddress:
      type: string
      minLength: 2
      maxLength: 24
      example: 11:22:33:44:55:66
    s_Color:
      type: string
      enum:
        - BLACK
        - SILVER
        - WHITE
        - BLUE
        - CLARET
        - BROWN
        - GREEN
        - RED
        - YELLOW
        - BEIGE
    s_VehicleCategory:
      type: string
      enum:
        - CAR
        - CAR8
        - BUS
        - MOTOR
        - VAN
        - TRUCK
        - TRAIL
    s_VignetteCategory:
      type: string
      enum:
        - D1M
        - D1
        - D2
        - B
        - U
    s_VignetteType:
      type: string
      enum:
        - WEEK
        - MONTH
        - YEAR
        - YEAR_11
        - YEAR_12
        - YEAR_13
        - YEAR_14
        - YEAR_15
        - YEAR_16
        - YEAR_17
        - YEAR_18
        - YEAR_19
        - YEAR_20
        - YEAR_21
        - YEAR_22
        - YEAR_23
        - YEAR_24
        - YEAR_25
        - YEAR_26
        - YEAR_27
        - YEAR_28
        - YEAR_29
    s_HighwayCostInfo:
      allOf:
        - type: object
          properties:
            highwayVignetteCost:
              $ref: '#/components/schemas/s_CostDouble'
        - type: object
          properties:
            comfortFee:
              $ref: '#/components/schemas/s_CostDouble'
    s_ParkingCostInfo:
      allOf:
        - type: object
          properties:
            parkingCost:
              $ref: '#/components/schemas/s_CostDouble'
        - type: object
          properties:
            comfortFee:
              $ref: '#/components/schemas/s_CostDouble'
    s_CostDouble:
      type: number
      example: 3500.0
    s_HighwayVignettePurchaseRequestDetails:
      type: object
      properties:
        validityStart:
          $ref: '#/components/schemas/s_Timestamp'
        vehicle:
          $ref: '#/components/schemas/s_BaseVehicle'
        vignetteType:
          $ref: '#/components/schemas/s_VignetteType'
    s_ParkingRequestDetails:
      type: object
      properties:
        ticketNumber:
          $ref: '#/components/schemas/s_String50'
        vehicle:
          $ref: '#/components/schemas/s_BaseVehicle'
        zoneCode:
          $ref: '#/components/schemas/s_String4'
        length:
          $ref: '#/components/schemas/s_ParkingLengthValue'
        startTime:
          $ref: '#/components/schemas/s_Timestamp'
        isRecurring:
          $ref: '#/components/schemas/s_IsRecurring'
    s_IsRecurring:
      type: boolean
      example: true
    s_RecurringSMS:
      type: object
      properties:
        recurringSMS:
          type: boolean
    s_SMSNotifRequired:
      type: object
      properties:
        smsNotifRequired:
          type: boolean
    s_ParkingLengthValue:
      type: integer
      description: Value of the time base
      example: 45
    s_PushNotifRequired:
      type: object
      properties:
        pushNotifRequired:
          type: boolean
    s_PIN:
      type: object
      properties:
        mp:
          $ref: '#/components/schemas/s_UserCode'
    s_LicencePlateNumber:
      type: string
      minLength: 3
      maxLength: 15
      pattern: '[A-Z0-9ÖŐÜŰ]{3,15}'
    s_CountryCode:
      type: string
      minLength: 1
      maxLength: 3
      pattern: '[A-Z]{1,3}'
    s_Timestamp:
      type: string
      format: date-time
    s_Date:
      type: string
      format: date
    s_FacadeElement:
      type: object
      properties:
        facadeElementId:
          $ref: '#/components/schemas/s_FacadeElementId'
        facadeElementType:
          $ref: '#/components/schemas/s_FacadeElementType'
        targetElementId:
          $ref: '#/components/schemas/s_TargetElementId'
        targetElementType:
          $ref: '#/components/schemas/s_TargetElementType'
        url:
          $ref: '#/components/schemas/s_UrlType'
        uiViewData:
          $ref: '#/components/schemas/s_UiViewData'
    s_FacadeElementId:
      type: string
      description: Identifier of facdeElement
      pattern: '[+a-zA-Z0-9_]{1,30}'
    s_TargetElementId:
      type: string
      description: Identifier of targetElement
      pattern: '[+a-zA-Z0-9_]{1,30}'
    s_TargetElementType:
      type: string
      enum:
        - PARTNER
        - PRODUCT
    s_FacadeElementType:
      type: string
      enum:
        - LOGO
        - PICTOGRAM
        - UI_VIEW
    s_UrlType:
      type: string
      minLength: 1
      maxLength: 4000
      description: Url string
      example: https://nmzrt.hu/file/slides/0/0479/volanjegy.png
    s_UiViewData:
      type: string
      format: byte
      example: "eyJzaG93RmF2b3JpdGVTdWJ3YXkiOnRydWV9"
    s_CityAndOwnerList:
      type: object
      properties:
        cities:
          type: array
          items:
            $ref: '#/components/schemas/s_CityAndOwner'
    s_CityAndOwner:
      type: object
      required:
        - cityId
        - cityName
      properties:
        cityId:
          $ref: '#/components/schemas/s_CityId'
        cityName:
          $ref: '#/components/schemas/s_CityName'
        productOwners:
          type: array
          items:
            $ref: '#/components/schemas/s_ProductOwner'
    s_City:
      type: object
      properties:
        cityId:
          $ref: '#/components/schemas/s_CityId'
        cityName:
          $ref: '#/components/schemas/s_CityName'
      description: Represents a City object
    s_Cities:
      type: array
      items:
        $ref: '#/components/schemas/s_City'
    s_CityId:
      type: string
      minLength: 1
      maxLength: 15
      description: Identifier of the city
      pattern: '[A-Z_\-]{1,15}'
      example: BUDAPEST
    s_CityName:
      type: string
      description: Name of the city
      maxLength: 50
      example: BUDAPEST
    s_ProductOwner:
      type: object
      description: List of the cities where the product is available
      properties:
        ownerId:
          $ref: '#/components/schemas/s_OwnerId'
        ownerName:
          $ref: '#/components/schemas/s_OwnerName'
    s_OwnerId:
      type: string
      minLength: 2
      maxLength: 12
      pattern: '[0-9]{2,12}'
      description: Identifier of the owner of the product
      example: 147915284
    s_OwnerName:
      type: string
      maxLength: 255
      description: Name of the owner of the product
      example: BKV ZRT.
    s_ProductId:
      type: string
      description: Identifier of the product
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      example: BKK30KOZOK
    s_ProductName:
      type: string
      description: Name of the product
      maxLength: 255
      example: Havi Budapest-bérlet közoktatásban tanulóknak
    s_FixType:
      type: string
      enum:
        - ENTRY_PRODUCT
        - PUBLIC_TRANSPORT
        - PROTECTED_ZONE_PRODUCT
      description: Type of the product (fix ticket)
      example: PUBLIC_TRANSPORT
    s_TimeBased:
      type: boolean
      description: True if it is a time based ticket
      example: true
    s_TimeBasedData:
      type: string
      maxLength: 50
      description: Unit of the time base e.g hour,day,week,moths,year
      example: day
    s_TimeBasedValue:
      type: integer
      description: Value of the time base
      example: 30
    s_UsabilityData:
      type: string
      maxLength: 50
      description: Felhasználhatóság Időalap érték típusa pl hour,day,week,moths,year
      example: day
    s_UsabilityValue:
      type: integer
      description: Felhasználhatóság Időalap típus mennyisége
      example: 30
    s_UsabilityEndDate:
      type: string
      format: date-time
      description: Felhasználhatóság végének fix dátuma
    s_QuantityBased:
      type: boolean
      description: Korlátozott felhasználás igen/nem
      example: false
    s_QuantityValue:
      type: integer
      description: Korlátozott felhasználás száma
      example: 60
    s_ValidityStartType:
      type: string
      enum:
        - SYSDATE
        - BY_USER
        - BY_VALIDATION
      description: Érvényesség kezdetének megadásának módja
      example: BY_USER
    s_ValidityEndType:
      type: string
      enum:
        - SYSDATE
        - END_OF_DAY
      description: Érvényesség végének megadásának módja
      example: END_OF_DAY
    s_PresaleDays:
      type: integer
      minimum: 0
      description: Megszorítás arra, hogy a teméket maximum hány napra előre lehet megvásárolni
      example: 30
    s_DistanceBased:
      type: boolean
      description: Távolságalapú jegy igen/nem
    s_HasEvalField:
      type: boolean
      description: A megvásárolt termék rendelkezik olyan mezőkkel, amelyeket logika értékel ki
      example: false
    s_ValidityInfo:
      type: object
      properties:
        timeBased:
          $ref: '#/components/schemas/s_TimeBased'
        timeBasedData:
          $ref: '#/components/schemas/s_TimeBasedData'
        timeBasedValue:
          $ref: '#/components/schemas/s_TimeBasedValue'
        usabilityData:
          $ref: '#/components/schemas/s_UsabilityData'
        usabilityValue:
          $ref: '#/components/schemas/s_UsabilityValue'
        usabilityEndDate:
          $ref: '#/components/schemas/s_UsabilityEndDate'
        quantityBased:
          $ref: '#/components/schemas/s_QuantityBased'
        quantityValue:
          $ref: '#/components/schemas/s_QuantityValue'
        validityStartType:
          $ref: '#/components/schemas/s_ValidityStartType'
        validityEndType:
          $ref: '#/components/schemas/s_ValidityEndType'
        presaleDays:
          $ref: '#/components/schemas/s_PresaleDays'
        fixType:
           $ref: '#/components/schemas/s_FixType'
        distanceBased:
          $ref: '#/components/schemas/s_DistanceBased'
        haseEvalField:
          $ref: '#/components/schemas/s_HasEvalField'
        fixGroupBased:
          type: boolean
        fixGroupValue:
          $ref: '#/components/schemas/s_PositiveInteger'
        moreActiveSameTime:
          type: boolean
        purchaseGroupRowId:
          type: integer
    s_ProductCostInfo:
      type: integer
      description: Cost of the product or group in case of group based product
      example: 3450
    s_VatContent:
      type: number
      format: double
      example: 21.26
      description: VAT content of the product
    s_BusinessType:
      type: string
      maxLength: 255
      description: Értékesítési mód, hogy milyen értékesítésben vesz részt az adott termék
      example: PUBLIC_SERVICE
    s_IdentifierId:
      description: Id of the identifier
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      example: B6DGFD2EJ5L
    s_IdentifierName:
      description: Name of the identifier
      type: string
      maxLength: 255
      example: Magyar közoktatási diákigazolvány
    s_IdentifierValue:
      description: Value of the identifier
      type: string
      maxLength: 4000
    s_RequiredIdentifier:
      type: object
      required:
        - identifierId
      properties:
        identifierId:
          $ref: '#/components/schemas/s_IdentifierId'
        identifierName:
          $ref: '#/components/schemas/s_IdentifierName'
        identifierValue:
          $ref: '#/components/schemas/s_IdentifierValue'
    s_RequiredIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/s_RequiredIdentifier'
    s_StateAid:
      type: boolean
      description: Állami kedvezményt tartalmazó termékek
      example: true
    s_DelayDuration:
      type: number
      minimum: 0
      description: Türelmi idő értéke percben
      example: 2
    s_TransportLineId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Közlekedési volnal azonosítója
      example: I5WBOGD9I
    s_DepartureTransportStationId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Induló állomás azonosítója
    s_ArrivalTransportStationId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Érkező állomás azonosítója
    s_Combined:
      type: boolean
      description: Kombinált jegyek lekérdezése
    s_TransportLineName:
      type: string
      minLength: 2
      maxLength: 100
      pattern: '.{2,100}'
      description: A közlekedési útvonal neve
      example: H5
    s_DepartureStationName:
      type: string
      minLength: 3
      maxLength: 100
      pattern: '.{3,100}'
      description: Az indulási állomás neve
    s_ArrivalStationName:
      type: string
      minLength: 3
      maxLength: 100
      pattern: '.{3,100}'
    s_TransportDistanceDetails:
      type: object
      required:
        - transportLineId
        - departureTransportStationId
        - arrivalTransportStationId
      properties:
        transportLineId:
          $ref: '#/components/schemas/s_TransportLineId'
        departureTransportStationId:
          $ref: '#/components/schemas/s_DepartureTransportStationId'
        arrivalTransportStationId:
          $ref: '#/components/schemas/s_ArrivalTransportStationId'
        combined:
          $ref: '#/components/schemas/s_Combined'
        transportLineName:
          $ref: '#/components/schemas/s_TransportLineName'
        departureStationName:
          $ref: '#/components/schemas/s_DepartureStationName'
        arrivalStationName:
          $ref: '#/components/schemas/s_ArrivalStationName'
    s_ProductDescription:
      type: string
      example: "
      A bérlet csak érvényes magyar közoktatási diákigazolvánnyal együtt
      használható, az oktatási azonosítót vagy a diákigazolvány sorszámát a vásárláskor kell megadni. A bérlet a
      sikeres vásárlást követen 2 perccel érhet el az alkalmazásban. A bérletet az ellenrzést végz személy részére
      (kérés esetén az általa felmutatott kód beolvasását követen) be kell mutatni – metróállomáson és elsajtós
      felszállási rendben közleked autóbuszon, trolibuszon a kiragasztott kód beolvasását követen a jegyképet kell
      bemutatni. A mobiljegy csak aktív internetkapcsolattal vehet igénybe. A bérlet az érvényesség kezdete eltt
      legfeljebb 30 nappal váltható meg elvételben, nem cserélhet, nem ruházható át, és csak az érvényesség kezdete
      eltt váltható vissza.Részletek a kedvezmény igénybevételérl a Jegyek és bérletek / Kedvezmények menüpont alatt.
      CIVTovábbi információ: https://bkk.hu/tomegkozlekedes/jegyek-es-berletek/jegy-es-berletarak/havi-budapestberlet-
      kozoktatasban-tanuloknak/, https://bkk.hu/mobiljegy/"
    s_ProductShortDescription:
      type: string
      example: "Tetszleges kezdnappal váltható. Érvényes a jelölt kezdnapon 0 órától
      (de legkorábban a vásárlás idpontjától) a következ hónap kezdnappal megegyez napon 02 óráig Budapest
      közigazgatási határán belül az 1-99, 101-299, 900-999, CITY trolibusz, M1, M2, M3, M4, H5, H6, H7, H8, H9, D14
      vonalakon, a MÁV-START meghatározott vonatain, a VOLÁN társaságok kijelölt elvárosi járatain és munkanapokon a
      D2, D11, D12 vonalakon."
    s_OwnerAddress:
      type: string
      maxLength: 4000
      example: 1075 BUDAPEST, RUMBACH SEBESTYÉN UTCA 19-21.
    s_OwnerPhone:
      type: string
      maxLength: 255
      example: +3613255255
    s_NeedVehicleDetails:
      type: boolean
      example: false
    s_RelatedTag:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          example: 2_Kedvezményes árú bérletek
    s_RelatedTags:
      type: array
      items:
        $ref: '#/components/schemas/s_RelatedTag'
    s_StornoAvailable:
      type: boolean
      example: true
    s_Marketable:
      type: boolean
      example: true
    s_ProductUniquePrefix:
      type: string
      maxLength: 50
      example: 1121137
    s_AvailableForCorporation:
      type: boolean
      example: false
    s_TokenMaxDeviceChange:
      type: integer
      example: 2
    s_ProductPeriods:
      type: object
      properties:
        endOfPeriod:
          $ref: '#/components/schemas/s_Timestamp'
        periods:
          $ref: '#/components/schemas/s_ProductPeriod'
    s_ProductPeriod:
      type: array
      items:
        $ref: '#/components/schemas/s_ProductPeriodItem'
    s_ProductPeriodItem:
      type: object
      properties:
        validityStart:
          $ref: '#/components/schemas/s_Timestamp'
        validityEnd:
          $ref: '#/components/schemas/s_Timestamp'
        marketable:
          $ref: '#/components/schemas/s_Marketable'
        marketableStart:
          $ref: '#/components/schemas/s_Timestamp'
        marketableEnd:
          $ref: '#/components/schemas/s_Timestamp'
    s_BaseProductData:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/s_ProductId'
        productName:
          $ref: '#/components/schemas/s_ProductName'
        validityInfo:
          $ref: '#/components/schemas/s_ValidityInfo'
        costInfo:
          $ref: '#/components/schemas/s_ProductCostInfo'
        vatContent:
          $ref: '#/components/schemas/s_VatContent'
        businessType:
          $ref: '#/components/schemas/s_BusinessType'
        requiredIdentifiers:
          $ref: '#/components/schemas/s_RequiredIdentifiers'
        stateAid:
          $ref: '#/components/schemas/s_StateAid'
        delayDuration:
          $ref: '#/components/schemas/s_DelayDuration'
        transportDistanceDetails:
          $ref: '#/components/schemas/s_TransportDistanceDetails'
        ownerId:
          $ref: '#/components/schemas/s_OwnerId'
        ownerName:
          $ref: '#/components/schemas/s_OwnerName'
    s_Product:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseProductData'
      - type: object
        properties:
          cities:
            $ref: '#/components/schemas/s_Cities'
          productDescription:
            $ref: '#/components/schemas/s_ProductDescription'
          productShortDescription:
            $ref: '#/components/schemas/s_ProductShortDescription'
          ownerAddress:
            $ref: '#/components/schemas/s_OwnerAddress'
          ownerPhone:
            $ref: '#/components/schemas/s_OwnerPhone'
          needVehicleDetails:
            $ref: '#/components/schemas/s_NeedVehicleDetails'
          relatedTags:
            $ref: '#/components/schemas/s_RelatedTags'
          stornoAvailable:
            $ref: '#/components/schemas/s_StornoAvailable'
          marketable:
            $ref: '#/components/schemas/s_Marketable'
          productUniquePrefix:
            $ref: '#/components/schemas/s_ProductUniquePrefix'
          availableForCorporation:
            $ref: '#/components/schemas/s_AvailableForCorporation'
          tokenMaxDeviceChange:
            $ref: '#/components/schemas/s_TokenMaxDeviceChange'
          productPeriods:
            $ref: '#/components/schemas/s_ProductPeriods'
          autoRePurchaseAvailable:
            type: boolean
    s_PurchaseId:
      type: string
      pattern: '[a-zA-Z0-9_]{5,46}'
      example: 1XTC6Y7TVS
    s_PurchaseTokenId:
      type: string
      maxLength: 12
      example: j4ztChMUqzKS
    s_TicketValidity:
      type: string
      enum:
        - INVALID
        - VALID
        - FUTURE_VALID
        - START_ON_VALIDATION
        - SUSPENDED
      example: VALID
    s_TicketUsageIndex:
      type: string
      maxLength: 50
      example: 0
    s_UsabilityEnd:
      type: string
      format: date-time
    s_ComfortCost:
      type: integer
      example: 0
    s_Reseller:
      type: string
      maxLength: 255
      example: TELENOR
    s_CorrectedCost:
      type: integer
    s_LastEntryPointName:
      type: string
      maxLength: 50
    s_PositiveInteger:
      type: number
      minimum: 0
    s_CartId:
      type: string
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
    s_PurchaseGroupId:
      type: string
      maxLength: 8
      pattern: '[+a-zA-Z0-9_/=]{1,8}'
    s_PaymentId:
      type: number
      format: int64
    s_AdditionalPurchaseData:
      type: object
      properties:
        cartId:
          $ref: '#/components/schemas/s_CartId'
        paymentId:
          $ref: '#/components/schemas/s_PaymentId'
    s_ProductQuantity:
      type: integer
      minimum: 1
      example: 1
    s_ProductToPurchase:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/s_ProductId'
        productQuantity:
          $ref: '#/components/schemas/s_ProductQuantity'
        vehicle:
          $ref: '#/components/schemas/s_BaseVehicle'
        validityStart:
            $ref: '#/components/schemas/s_Timestamp'
        requiredIdentifiers:
          $ref: '#/components/schemas/s_RequiredIdentifiers'
        transportDistanceDetails:
          $ref: '#/components/schemas/s_TransportDistanceDetails'
        autoRePurchase:
          type: boolean
    s_PurchasedProduct:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_BaseProductData'
      - type: object
        properties:
          purchaseId:
            $ref: '#/components/schemas/s_PurchaseId'
          purchaseTokenId:
            $ref: '#/components/schemas/s_PurchaseTokenId'
          clientId:
            $ref: '#/components/schemas/s_ClientId'
          ticketValidity:
            $ref: '#/components/schemas/s_TicketValidity'
          ticketUsageIndex:
            $ref: '#/components/schemas/s_TicketUsageIndex'
          validityStart:
            $ref: '#/components/schemas/s_Timestamp'
          validityEnd:
            $ref: '#/components/schemas/s_Timestamp'
          usabilityEnd:
            $ref: '#/components/schemas/s_UsabilityEnd'
          purchaseDate:
            $ref: '#/components/schemas/s_Timestamp'
          comfortCost:
            $ref: '#/components/schemas/s_ComfortCost'
          storno:
            type: boolean
          stornoDate:
            $ref: '#/components/schemas/s_Timestamp'
          equityStornoAmount:
            $ref: '#/components/schemas/s_ProductCostInfo'
          reseller:
            $ref: '#/components/schemas/s_Reseller'
          correctedCost:
            $ref: '#/components/schemas/s_CorrectedCost'
          plateNumber:
            $ref: '#/components/schemas/s_LicencePlateNumber'
          usedToday:
            type: boolean
          stornoAvailable:
            $ref: '#/components/schemas/s_StornoAvailable'
          lastEntryPointName:
            $ref: '#/components/schemas/s_LastEntryPointName'
          remainingDeviceChange:
            $ref: '#/components/schemas/s_PositiveInteger'
          purchaseGroupId:
            $ref: '#/components/schemas/s_PurchaseGroupId'
          autoRePurchaseAvailable:
            type: boolean
          autoRePurchase:
            type: boolean
    s_Code:
      type: string
      maxLength: 255
      example: '5455841460'
    s_Image:
      type: string
      format: byte
    s_ValidFrom:
      type: string
      format: date-time
    s_Validto:
      type: string
      format: date-time
    s_AnimationType:
      type: string
      maxLength: 50
    s_SecretData:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/s_Image'
        validFrom:
          $ref: '#/components/schemas/s_ValidFrom'
        validTo:
          $ref: '#/components/schemas/s_Validto'
        animationType:
          $ref: '#/components/schemas/s_AnimationType'
    s_EntryPointName:
      type: string
      maxLength: 50
    s_EntryPointype:
      type: string
      maxLength: 50
    s_Secret:
      type: object
      properties:
        previous:
          $ref: '#/components/schemas/s_SecretData'
        current:
          $ref: '#/components/schemas/s_SecretData'
        next::
          $ref: '#/components/schemas/s_SecretData'
        entryPointName:
          $ref: '#/components/schemas/s_EntryPointName'
        entryPointType:
          $ref: '#/components/schemas/s_EntryPointype'
        timestamp:
          $ref: '#/components/schemas/s_Timestamp'
    s_ProductType:
      description: Type of the product. It can be available or purchased.
    s_TicketState:
      type: string
      enum:
        - active
        - inactive
      description: Type of the product (fix ticket)
      example: active
    s_UndergroundLine:
      type: object
      properties:
        line:
          $ref: '#/components/schemas/s_UndergroundLineName'
        firstStationName:
          $ref: '#/components/schemas/s_StationName'
        lastStationName:
          $ref: '#/components/schemas/s_StationName'
        stations:
          type: array
          items:
            $ref: '#/components/schemas/s_UndergroundStation'
    s_UndergroundStation:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/s_UndergroundStatitonName'
        number:
          type: number
          example: 1
          minimum: 1
        code:
          $ref: '#/components/schemas/s_Code'
        gpsCoord:
          $ref: '#/components/schemas/s_GpsCoord'
        lines:
          $ref: '#/components/schemas/s_UndergroundLineNameList'
    s_UndergroundLineName:
      type: string
      minLength: 1
      maxLength: 64
      pattern: '.{1,64}'
      example: 'M4'
      description: A metróvonal neve
    s_UndergroundStatitonName:
      type: string
      minLength: 1
      maxLength: 128
      pattern: '.{1,128}'
      example: 'Kelenföld Vasútállomás'
      description: A metró állomás neve
    s_GpsCoord:
      type: object
      required:
        - lat
        - long
      properties:
        lat:
          type: number
          format: double
          example: 47.500141
        long: 
          type: number
          format: double
          example: 19.082331
      description: GPS koordináta
    s_UndergroundLineNameList:
      type: array
      items:
        type: string
        example: 'M4'
    s_TransportLine:
      type: object
      properties:
        transportLineId:
          $ref: '#/components/schemas/s_TransportLineId'
        name:
          $ref: '#/components/schemas/s_TransportLineName'
        providerId:
          $ref: '#/components/schemas/s_ProviderId'
        status:
          $ref: '#/components/schemas/s_TransportLineStatus'
        firstStationName:
          $ref: '#/components/schemas/s_StationName'
        lastStationName:
          $ref: '#/components/schemas/s_StationName'
    s_ProviderId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Provider of transportLine
      example: 146314190
    s_StationName:
      type: string
      minLength: 2
      maxLength: 100
      pattern: '.{2,100}'
      description: A közlekedési állomás neve
      example: 'Batthyány tér'
    s_TransportLineStatus:
      type: string
      enum:
        - active
        - inactive
      description: Állomás státusz
      example: active
    s_TransportStation:
      type: object
      properties:
        transportStationId:
          $ref: '#/components/schemas/s_TransportStationId'
        name:
          $ref: '#/components/schemas/s_TransportStationName'
        status:
          $ref: '#/components/schemas/s_TransportLineStatus'
        transportLineStationId:
          $ref: '#/components/schemas/s_TransportLineStationId'
        transportLineId:
          $ref: '#/components/schemas/s_TransportLineId'
        stationSequence:
          $ref: '#/components/schemas/s_StationSequence'
        extraTicketNeeded:
          type: boolean
    s_TransportStationId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Transport station id
      example: I5WBIIT7G
    s_TransportStationName:
      type: string
      minLength: 2
      maxLength: 100
      pattern: '.{2,100}'
      description: Transport station name
      example: Batthyány tér
    s_TransportLineStationId:
      type: string
      maxLength: 30
      pattern: '[+a-zA-Z0-9_/=]{1,30}'
      description: Közlekedési volnal azonosítója
      example: I5WCWSF8S
    s_StationSequence:
      type: integer
      minimum: 0
      example: 0
    s_InsuranceBase:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/s_InsuranceId'
        name:
          type: string
          example: Egyéni
        monthlyPrice:
          $ref: '#/components/schemas/s_InsurancePrice'
    s_InsuranceBaseWithDesc:
      type: object
      allOf:
      - $ref: '#/components/schemas/s_InsuranceBase'
      - properties:
          shortDescription:
            type: string
            maxLength: 100
          longDescription:
            type: string
            maxLength: 1000
    s_InsuranceMain:
      allOf:
        - $ref: '#/components/schemas/s_InsuranceBaseWithDesc'
        - type: object
          properties:
            type:
              type: string
              enum: [INDIVIDUAL, FAMILY]
            levelName:
              type: string
              example: Alap csomag
            hierarchy:
              type: number
              example: 1
            contractPeriod:
              $ref: '#/components/schemas/s_ContractData'
    s_InsuranceAdditional:
      $ref: '#/components/schemas/s_InsuranceBaseWithDesc'
    s_InsurancePackageInfo:
      allOf:
        - $ref: '#/components/schemas/s_InsuranceMain'
        - properties:
            additionals:
              type: array
              items:
                $ref: '#/components/schemas/s_InsuranceAdditional'
    s_InsuranceId:
      type: string
      description: "Each type has an id. Types: EGYENI_ALAP, EGYENI_EXTRA, CSALADI_ALAP, CSALADI_EXTRA, WORLD_PASS, MOTOR_PLUS, FLIGHT_PLUS, WINTER_PLUS, SPORT_PLUS"
      example: EGYENI_ALAP
    s_InsurancePrice:
      type: number
      minimum: 0
      example: 300.0
    s_InsuranceTermsInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        link:
          type: string
        required:
          type: boolean
    s_ContractData:
      type: object
      properties:
        value:
          type: string
          example: 1
        type:
          type: string
          example: year
        text:
          type: string
    s_WalletData:
      type: object
      description: in case of Android it is a json, in case of iOS it is a pkpass
      properties:
        enabled:
          type: boolean
          description: true means it can be integrated (button is visible or not)
        androidUrl:
          type: string
          description: link to add
          example: "https://pay.google.com/gp/v/save/eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJnb29nbGUiLCJwYXlsb2FkIjp7ImdlbmVyaWNPYmplY3RzIjpbeyJjYXJkVGl0bGUiOnsiZGVmYXVsdFZhbHVlIjp7Imxhbmd1YWdlIjoiaHUtSFUiLCJ2YWx1ZSI6IkNzYWzDoWRpIGFsYXAgY3NvbWFnIn19LCJjbGFzc0lkIjoiMzM4ODAwMDAwMDAyMjgyMjM3OC5pbnN1cmFjZS1tb2JpbHZhc2FybGFzLWRldmVsb3BlciIsImhlYWRlciI6eyJkZWZhdWx0VmFsdWUiOnsibGFuZ3VhZ2UiOiJodS1IVSIsInZhbHVlIjoiQUEyMkIyQjMifX0sImhlcm9JbWFnZSI6eyJjb250ZW50RGVzY3JpcHRpb24iOnsiZGVmYXVsdFZhbHVlIjp7Imxhbmd1YWdlIjoiaHUtSFUiLCJ2YWx1ZSI6IlRlbGVrb20gbG9nbyBmb290ZXIifX0sInNvdXJjZVVyaSI6eyJ1cmkiOiJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vd2FsbGV0LWxhYi10b29scy1jb2RlbGFiLWFydGlmYWN0cy1wdWJsaWMvZ29vZ2xlLWlvLWhlcm8tZGVtby1vbmx5LnBuZyJ9fSwiaGV4QmFja2dyb3VuZENvbG9yIjoiI0UyMDA3NCIsImlkIjoiMzM4ODAwMDAwMDAyMjgyMjM3OC4yNTAxMDcxNjM4MDEiLCJsb2dvIjp7ImNvbnRlbnREZXNjcmlwdGlvbiI6eyJkZWZhdWx0VmFsdWUiOnsibGFuZ3VhZ2UiOiJodS1IVSIsInZhbHVlIjoiQ3NhbMOhZGkgYWxhcCBjc29tYWcgbG9nw7MifX0sInNvdXJjZVVyaSI6eyJ1cmkiOiJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vd2FsbGV0LWxhYi10b29scy1jb2RlbGFiLWFydGlmYWN0cy1wdWJsaWMvcGFzc19nb29nbGVfbG9nby5qcGcifX0sInN0YXRlIjoiQUNUSVZFIiwic3ViaGVhZGVyIjp7ImRlZmF1bHRWYWx1ZSI6eyJsYW5ndWFnZSI6Imh1LUhVIiwidmFsdWUiOiJGZWRlemV0YXpvbm9zw610w7MifX0sInRleHRNb2R1bGVzRGF0YSI6W3siYm9keSI6IjI1LjAyLjE3IDExOjM0IiwiaGVhZGVyIjoiS8O2dMOpcyBpZGVqZSIsImlkIjoic3RhcnRfZGF0ZSJ9LHsiYm9keSI6IiszNjMwMTIzNDU2NyIsImhlYWRlciI6IkvDoXJiZWplbGVudMOpcyIsImlkIjoicGhvbmVfbnVtYmVyIn0seyJib2R5IjoiMjUuMDMuMTEiLCJoZWFkZXIiOiJXb3JsZCBQYXNzIiwiaWQiOiJ3b3JsZF9wYXNzIn0seyJib2R5IjoiMjUuMDQuMDEuIiwiaGVhZGVyIjoiTW90b3IgUGx1cyIsImlkIjoibW90b3JfcGx1cyJ9LHsiYm9keSI6IjI1LjA1LjAxLiIsImhlYWRlciI6IkZsaWdodCBQbHVzIiwiaWQiOiJmbGlnaHRfcGx1cyJ9LHsiYm9keSI6IjI1LjA1LjAxLiIsImhlYWRlciI6IldpbnRlciBQbHVzIiwiaWQiOiJ3aW50ZXJfcGx1cyJ9LHsiYm9keSI6Ii0iLCJoZWFkZXIiOiJTcG9ydCBQbHVzIiwiaWQiOiJzcG9ydF9wbHVzIn1dfV19LCJpc3MiOiJkZXZlbG9wZXItd2FsbGV0LWFjY291bnRAbXktcHJvamVjdC0xNDczMjUzMzYwMDEyLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwidHlwIjoic2F2ZXRvd2FsbGV0IiwiaWF0IjoxNzM2MjY1NTAzfQ.k_dng-shXgkIY4I_SJyPE4htfCoJQdknOBDOb-QcWQmyOblhfbP6VZMf9ZZGEgrikMBcWUzZJXeJfVFfZGyebJ56eqqbOw9u6OiI77hevvKV8SjHNHAc2rNGsZmhprL9NncGY7iT5EH-RBG5cw23LvZm2ymE8lc6kJFtZCqB3dQSzDksoHkacxu6fhLSUKprpWmWIbwk1Q9PXnJtgoBo4gqyp6Engzw6aD6ROwKwYUcwpQTwsCtTIMPyATED3HBTwqxcXYWSmQi2oKecxnoyVoc19WxGgmV33yc4wJkufJ26Ipt_3WZCu8QZaDMcB9ebohvnf16j5GgC5fRZDB4cWQ"
        iosPkpassData:
          type: string
          format: base64
          description: ios .pkpass file
          example: "UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA=="
    s_OrderedInsurance:
      type: object
      description: Information about an ordered insurance
      properties:
        coverageId:
          type: string
          description: The unique identifier for the insurance coverage
        orderDateTime:
          type: string
          format: date-time
          description: The date and time when the insurance was ordered
        coverageStartDate:
          type: string
          format: date
          description: The date when the coverage starts
        claimPhoneNumber:
          type: string
          description: The phone number to contact for claims
        packageData:
          $ref: '#/components/schemas/s_InsuranceMain'
        additionals:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/s_InsuranceBase'
            - properties:
                orderDateTime:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [ACTIVE,CANCELLED]
                isCancellable:
                  type: boolean
                  description: Indicates if the additional is cancellable this month # hűségidőn belül true, utána havi egyszer lemondható
          description: List of additional packages
        monthlyPrice: # Monthly price of the insurance
          $ref: '#/components/schemas/s_InsurancePrice'
        cancelPeriodStartDate:
          type: string
          format: date
          description: Start date of cancel period. From this date the insurance is cancellable
        cancellationDate:
          type: string
          format: date
          nullable: true
          description: Date of cancellation, if applicable
        terminationDate:
          type: string
          format: date
          nullable: true
          description: Date of termination, if applicable
        contractedPeriodEndDate:
          type: string
          format: date
          description: End day of the contracted period. After this date the cancel method terminates the insurance immediately.
        walletEnabled:
          type: boolean
          description: true means it can be integrated (button is visible or not)
        documentsPath:
          type: string
        status:
          type: string
          enum: [ACTIVE,CANCELLED,TERMINATED]
        orderableAdditionals:
          type: array
          items:
            $ref: '#/components/schemas/s_InsuranceAdditional'
    s_TextbookVersion:
      type: string
      maxLength: 32
      description: Textbook version
      example: "9.1.0.V3_HU"
    s_TextBook:
      type: object
      properties:
        lang:
          type: string
          example: "HU"
          description: Language code in ISO format (e.g., HU, EN).
        version:
          type: string
          maxLength: 32
          example: "9.1.0.V3_HU"
          description: The version identifier of the textbook content.
        texts:
          type: object
          additionalProperties:
            type: string
          example:
            menu: "Fő menü"
            button1: "Belépés"
          description: Main UI texts in key-value pairs.
      required:
        - version
        - lang
        - texts
    s_Error:
      required:
        - title
        - status
        - detail
        - code
      properties:
        title:
          type: string
          maxLength: 64
          description: 'A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.'
        status:
          type: integer
          minimum: 0
          maximum: 999
          description: 'The HTTP status code, generated by the origin server for this occurrence of the problem.'
        detail:
          type: string
          maxLength: 128
          description: 'Short description of the problem. Always respond with generic error messages to avoid revealing details of the failure unnecessarily.'
        code:
          type: integer
          minimum: -9999999
          maximum: 9999999
          description: 'Only for internal problem code.'